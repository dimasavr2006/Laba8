–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: C:\Users\dimas\IdeaProjects\Laba8\src
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: 2025-05-29 22:56:40
================================================================================

üìÇ src/
    üìÇ main/
        üìÇ java/
            üìÇ classes/
                üìÑ Car.java (4744 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (Car.java) ---
                  | package classes;
                  | 
                  | import com.fasterxml.jackson.annotation.JsonProperty;
                  | import exceptions.NullStringException;
                  | import exceptions.WrongAddLineInScriptException;
                  | 
                  | import java.util.InputMismatchException;
                  | import java.util.Scanner;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class Car {
                  |     /**
                  |      * –ö–ª–∞—Å—Å Car
                  |      * –•—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–æ–ª–µ car —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ HumanBeing
                  |      */
                  |     @JsonProperty("name")
                  |     /**
                  |      * –ü–æ–ª–µ –∏–º–µ–Ω–∏ –º–∞—à–∏–Ω—ã
                  |      * –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö String
                  |      */
                  |     private String name;
                  |     @JsonProperty("cool")
                  |     /**
                  |      * –ü–æ–ª–µ –∫—Ä—É—Ç–æ—Å—Ç–∏ –º–∞—à–∏–Ω—ã
                  |      * –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö boolean
                  |      */
                  |     private boolean cool;
                  | 
                  | 
                  |     public Car(String name, boolean cool) {
                  |         if (name == null || name.trim().isEmpty()) {
                  |             throw new IllegalArgumentException("–∏–º—è –º–∞—à–∏–Ω—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null –∏–ª–∏ –ø—É—Å—Ç–æ–π");
                  |         }
                  |         this.name = name;
                  |         this.cool = cool;
                  |     }
                  | 
                  |     public Car (boolean b){
                  | //        Scanner sc = run.Main.sc;
                  |         Scanner sc = new Scanner(System.in);
                  |         while (true){
                  |             try {
                  |                 System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã, —É—á—Ç–∏—Ç–µ, —á—Ç–æ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω");
                  |                 String sName = sc.nextLine();
                  |                 if (sName == null || sName.trim().isEmpty()) {
                  |                     throw new NullStringException();
                  |                 }
                  |                 this.name = sName;
                  |                 break;
                  |             } catch (NullStringException e) {
                  |                 System.out.println(e.getMessage());
                  |             }
                  |         }
                  |         while (true){
                  |             try {
                  |                 System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫—Ä—É—Ç–∞ –ª–∏ –º–∞—à–∏–Ω–∞, true –µ—Å–ª–∏ –¥–∞");
                  |                 String input = sc.nextLine();
                  |                 if (input.equalsIgnoreCase("true") || input.equalsIgnoreCase("false")) {
                  |                     this.cool = Boolean.parseBoolean(input);
                  |                     break;
                  |                 }
                  |             } catch (InputMismatchException e) {
                  |                 System.out.println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞");
                  |             } catch (NullStringException e) {
                  |                 System.out.println(e.getMessage());
                  |                 System.out.println("–ü–µ—Ä–µ–≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ");
                  |             }
                  |         }
                  |     }
                  | 
                  |     public Car (boolean b, Scanner sc){
                  | //        Scanner sc = run.Main.sc;
                  |         while (true){
                  |             try {
                  |                 System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã, —É—á—Ç–∏—Ç–µ, —á—Ç–æ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω");
                  |                 String sName = sc.nextLine();
                  |                 if (sName == null || sName.trim().isEmpty()) {
                  |                     throw new NullStringException();
                  |                 }
                  |                 this.name = sName;
                  |                 break;
                  |             } catch (NullStringException e) {
                  |                 System.out.println(e.getMessage());
                  |                 throw new WrongAddLineInScriptException();
                  |             }
                  |         }
                  |         while (true){
                  |             try {
                  |                 System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫—Ä—É—Ç–∞ –ª–∏ –º–∞—à–∏–Ω–∞, true –µ—Å–ª–∏ –¥–∞");
                  |                 String input = sc.nextLine();
                  |                 if (input.equalsIgnoreCase("true") || input.equalsIgnoreCase("false")) {
                  |                     this.cool = Boolean.parseBoolean(input);
                  |                     break;
                  |                 } else {
                  |                     throw new WrongAddLineInScriptException();
                  |                 }
                  |             } catch (InputMismatchException e) {
                  |                 System.out.println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞");
                  |             } catch (NullStringException e) {
                  |                 System.out.println(e.getMessage());
                  |                 System.out.println("–ü–µ—Ä–µ–≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ");
                  |             }
                  |         }
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –º–∞—à–∏–Ω—ã
                  |      * @return –∏–º—è
                  |      */
                  |     public String getName() {
                  |         return name;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä—É—Ç–æ—Å—Ç—å –º–∞—à–∏–Ω—ã
                  |      * @return –ö—Ä—É—Ç–æ—Å—Ç—å
                  |      */
                  |     public boolean isCool() {
                  |         return cool;
                  |     }
                  | 
                  |     public void setName(String name) {
                  |         this.name = name;
                  |     }
                  | 
                  |     public void setCool(boolean cool) {
                  |         this.cool = cool;
                  |     }
                  | 
                  |     public Car (){
                  | 
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã
                  |      * @return –°—Ç—Ä–æ–∫–∞ –º–∞—à–∏–Ω—ã
                  |      */
                  |     @Override
                  |     public String toString() {
                  |         return "Car: " +
                  |                 "cool = " + cool +
                  |                 ", name = " + name;
                  |     }
                  | 
                  | 
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (Car.java) ---

                üìÑ Coordinates.java (4321 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (Coordinates.java) ---
                  | package classes;
                  | 
                  | import com.fasterxml.jackson.annotation.JsonProperty;
                  | import run.Main;
                  | 
                  | import java.util.InputMismatchException;
                  | import java.util.Scanner;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class Coordinates {
                  | 
                  |     @JsonProperty("x")
                  |     private long x;
                  |     @JsonProperty("y")
                  |     private long y;
                  | 
                  |     Scanner sc = Main.sc;
                  | 
                  |     public Coordinates(long x, long y) {
                  |         this.x = x;
                  |         this.y = y;
                  |     }
                  |     public Coordinates (boolean b){
                  |         while (true) {
                  |             System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É x:");
                  |             String xxx = sc.nextLine();
                  |             try {
                  |                 this.x = Long.parseLong(xxx.trim());
                  |                 break;
                  |             } catch (NumberFormatException e) {
                  |                 System.out.println("–ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
                  |             }
                  |         }
                  |         while (true){
                  |             System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É y:");
                  |             String yyy = sc.nextLine();
                  |             try {
                  |                 this.y = Long.parseLong(yyy.trim());
                  |                 break;
                  |             } catch (InputMismatchException e){
                  |                 System.out.println("–ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
                  |             }
                  |         }
                  |         Coordinates c = new Coordinates(x,y);
                  |     }
                  | 
                  |     public Coordinates (boolean b, Scanner sc) {
                  |         while (true) {
                  |             System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É x:");
                  |             String xxx = sc.nextLine();
                  |             try {
                  |                 this.x = Long.parseLong(xxx.trim());
                  |                 break;
                  |             } catch (NumberFormatException e) {
                  |                 System.out.println("–ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
                  |             }
                  |         }
                  |         while (true){
                  |             System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É y:");
                  |             String yyy = sc.nextLine();
                  |             try {
                  |                 this.y = Long.parseLong(yyy.trim());
                  |                 break;
                  |             } catch (InputMismatchException e){
                  |                 System.out.println("–ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
                  |             }
                  |         }
                  |         Coordinates c = new Coordinates(x,y);
                  |     }
                  |     public Coordinates() {
                  |     }
                  | 
                  | //    public Coordinates createFromConsole() {
                  | //        Scanner sc = new Scanner(System.in);
                  | //        Long x = InputFieldBuilder.build(sc, Long.class)
                  | //                .start("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É x")
                  | //                .inputParams("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                  | //                .againMsg("–ü–µ—Ä–µ–≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                  | //                .againMsgParams("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω")
                  | //                .end("x –∑–∞–¥–∞–ª–∏, –∏–¥—ë–º –¥–∞–ª—å—à–µ")
                  | //                .build();
                  | //        Long y = InputFieldBuilder.build(sc, Long.class)
                  | //                .start("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É y")
                  | //                .inputParams("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                  | //                .againMsg("–ü–µ—Ä–µ–≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                  | //                .againMsgParams("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω")
                  | //                .end("y –∑–∞–¥–∞–ª–∏, –∏–¥—ë–º –¥–∞–ª—å—à–µ")
                  | //                .build();
                  | //        Coordinates c = new Coordinates(x,y);
                  | //        return c;
                  | //    }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É x
                  |      * @return x
                  |      */
                  |     public long getX() {
                  |         return x;
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–¥–∞—ë—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É x
                  |      * @param x
                  |      */
                  |     public void setX(long x) {
                  |         this.x = x;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É y
                  |      * @return y
                  |      */
                  |     public long getY() {
                  |         return y;
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–¥–∞—ë—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É y
                  |      * @param y
                  |      */
                  |     public void setY(long y) {
                  |         this.y = y;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                  |      * @return –°—Ç—Ä–æ–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                  |      */
                  |     @Override
                  |     public String toString() {
                  |         return "Coordinates: " +
                  |                 "y = " + y +
                  |                 ", x = " + x;
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (Coordinates.java) ---

                üìÑ HumanBeing.java (13129 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (HumanBeing.java) ---
                  | package classes;
                  | 
                  | import com.fasterxml.jackson.annotation.JsonFormat;
                  | import com.fasterxml.jackson.annotation.JsonProperty;
                  | import enums.Mood;
                  | import enums.WeaponType;
                  | 
                  | import java.util.Date;
                  | import java.util.Objects;
                  | 
                  | public class HumanBeing implements Comparable<HumanBeing>{
                  | 
                  |     @JsonProperty("id")
                  |     /**
                  |      * ID —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                  |      * –ì–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                  |      */
                  |     private int id;
                  | 
                  |     /**
                  |      * –∏–º—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                  |      * NotNull
                  |      */
                  |     private String name; // not null
                  | 
                  |     /**
                  |      * –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                  |      */
                  |     private Coordinates coordinates; // not null
                  | 
                  |     @JsonProperty("creationDate")
                  |     @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm:ss")
                  |     /**
                  |      * –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                  |      * @version 0.0001 (prealpha) : –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –ø—Ä–æ—Å—Ç–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–¥–∞
                  |      */
                  |     private java.util.Date creationDate; // not null
                  | 
                  |     @JsonProperty("realHero")
                  |     /**
                  |      * –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç–æ—è—â–∏–º –≥–µ—Ä–æ–µ–º
                  |      */
                  |     private boolean realHero;
                  |     @JsonProperty("hasToothpick")
                  |     /**
                  |      * –ï—Å—Ç—å –ª–∏ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∑—É–±–Ω–∞—è –±–æ–ª—å
                  |      */
                  |     private boolean hasToothpick;
                  |     @JsonProperty("impactSpeed")
                  |     /**
                  |      * –°–∫–æ—Ä–æ—Å—Ç—å —É–¥–∞—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                  |      */
                  |     private Long impactSpeed; // not null
                  |     @JsonProperty("soundtrackName")
                  |     /**
                  |      * –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞—É–Ω–¥—Ç—Ä–µ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                  |      */
                  |     private String soundtrackName; // not null
                  |     @JsonProperty("weaponType")
                  |     /**
                  |      * –¢–∏–ø –æ—Ä—É–∂–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                  |      * –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π enum —á–∏—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—É–∏—é)))
                  |      * @see WeaponType
                  |      */
                  |     private WeaponType weaponType; // not null
                  |     @JsonProperty("mood")
                  |     /**
                  |      * –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                  |      * –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π enum —á–∏—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—É–∏—é)))
                  |      * @see Mood
                  |      */
                  |     private Mood mood; // not null
                  | 
                  |     private Car car; // not null
                  | 
                  |     private int ownerId;
                  | 
                  | 
                  |     public HumanBeing (){
                  |         this.creationDate = new Date();
                  |         creationDate.setTime(System.currentTimeMillis());
                  |         try {
                  |             if (name == null) {
                  |                 throw new IllegalArgumentException("–∏–º—è –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                  |             }
                  |             if (coordinates == null) {
                  |                 throw new IllegalArgumentException("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å null");
                  |             }
                  |             if (impactSpeed == null) {
                  |                 throw new IllegalArgumentException("–°–∫–æ—Ä–æ—Å—Ç—å —É–¥–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                  |             }
                  |             if (soundtrackName == null) {
                  |                 throw new IllegalArgumentException("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞—É–Ω–¥—Ç—Ä–µ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç—å –±—ã—Ç—å null");
                  |             }
                  |             if (weaponType == null) {
                  |                 throw new IllegalArgumentException("–¢–∏–ø –æ—Ä—É–∂–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                  |             }
                  |             if (mood == null) {
                  |                 throw new IllegalArgumentException("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                  |             }
                  |             if (car == null) {
                  |                 throw new IllegalArgumentException("–ú–∞—à–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                  |             }
                  |         } catch (IllegalArgumentException e) {
                  |             e.getMessage();
                  |         }
                  |     }
                  | 
                  |     public HumanBeing(boolean b) {
                  |         creationDate = new Date();
                  |     }
                  | 
                  |     public HumanBeing(int id, String name, Coordinates coordinates, Date creationDate, boolean realHero, boolean hasToothpick, Long impactSpeed, String soundtrackName, WeaponType weaponType, Mood mood, Car car) {
                  |         this.id = id;
                  |         this.name = name;
                  |         this.coordinates = coordinates;
                  |         this.creationDate = creationDate;
                  |         this.realHero = realHero;
                  |         this.hasToothpick = hasToothpick;
                  |         this.impactSpeed = impactSpeed;
                  |         this.soundtrackName = soundtrackName;
                  |         this.weaponType = weaponType;
                  |         this.mood = mood;
                  |         this.car = car;
                  |     }
                  | 
                  |     public HumanBeing(
                  |             String name,
                  |             Coordinates coordinates,
                  |             boolean realHero,
                  |             boolean hasToothpick,
                  |             Long impactSpeed,
                  |             String soundtrackName,
                  |             WeaponType weaponType,
                  |             Mood mood,
                  |             Car car
                  |     ) {
                  | 
                  |         this.creationDate = new Date();
                  |         creationDate.setTime(System.currentTimeMillis());
                  |         this.realHero = realHero;
                  |         this.hasToothpick = hasToothpick;
                  | 
                  |         try {
                  |             if (name == null) {
                  |                 throw new IllegalArgumentException("–∏–º—è –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                  |             }
                  |             this.name = name;
                  |             if (coordinates == null) {
                  |                 throw new IllegalArgumentException("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å null");
                  |             }
                  |             this.coordinates = coordinates;
                  |             if (impactSpeed == null) {
                  |                 throw new IllegalArgumentException("–°–∫–æ—Ä–æ—Å—Ç—å —É–¥–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                  |             }
                  |             this.impactSpeed = impactSpeed;
                  |             if (soundtrackName == null) {
                  |                 throw new IllegalArgumentException("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞—É–Ω–¥—Ç—Ä–µ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                  |             }
                  |             this.soundtrackName = soundtrackName;
                  |             if (weaponType == null) {
                  |                 throw new IllegalArgumentException("–¢–∏–ø –æ—Ä—É–∂–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                  |             }
                  |             this.weaponType = weaponType;
                  |             if (mood == null) {
                  |                 throw new IllegalArgumentException("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                  |             }
                  |             this.mood = mood;
                  |             if (car == null) {
                  |                 throw new IllegalArgumentException("–ú–∞—à–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                  |             }
                  |             this.car = car;
                  |         } catch (IllegalArgumentException e) {
                  |             e.getMessage();
                  |         }
                  |     }
                  | 
                  |     public HumanBeing(int id, String name, Coordinates coordinates, Date creationDate, boolean realHero, boolean hasToothpick, Long impactSpeed, String soundtrackName, WeaponType weaponType, Mood mood, Car car, int ownerId) {
                  |         this.id = id;
                  |         this.name = name;
                  |         this.coordinates = coordinates;
                  |         this.creationDate = creationDate;
                  |         this.realHero = realHero;
                  |         this.hasToothpick = hasToothpick;
                  |         this.impactSpeed = impactSpeed;
                  |         this.soundtrackName = soundtrackName;
                  |         this.weaponType = weaponType;
                  |         this.mood = mood;
                  |         this.car = car;
                  |         this.ownerId = ownerId;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @return id
                  |      */
                  |     public int getId() {
                  |         return id;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @return name
                  |      */
                  |     public String getName() {
                  |         return name;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @return coordinates
                  |      */
                  |     public Coordinates getCoordinates() {
                  |         return coordinates;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @return creationDate
                  |      */
                  |     public Date getCreationDate() {
                  |         return creationDate;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≥–µ—Ä–æ–µ–º
                  |      * @return realHero
                  |      */
                  |     public boolean isRealHero() {
                  |         return realHero;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—Å—Ç—å –ª–∏ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –∑—É–±–Ω–∞—è –±–æ–ª—å
                  |      * @return hasToothpick
                  |      */
                  |     public boolean isHasToothpick() {
                  |         return hasToothpick;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —É–¥–∞—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @return impactSpeed
                  |      */
                  |     public Long getImpactSpeed() {
                  |         return impactSpeed;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞—É–Ω–¥—Ç—Ä–µ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @return soundtrackName
                  |      */
                  |     public String getSoundtrackName() {
                  |         return soundtrackName;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –æ—Ä—É–∂–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @return weaponType
                  |      */
                  |     public WeaponType getWeaponType() {
                  |         return weaponType;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @return mood
                  |      */
                  |     public Mood getMood() {
                  |         return mood;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—à–∏–Ω—É —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @return car
                  |      */
                  |     public Car getCar() {
                  |         return car;
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–¥–∞—ë—Ç ID —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @param id
                  |      */
                  |     public void setId(int id) {
                  |         this.id = id;
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–¥–∞—ë—Ç –∏–º—è —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @param name
                  |      */
                  |     public void setName(String name) {
                  |         this.name = name;
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–¥–∞—ë—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @param coordinates
                  |      */
                  |     public void setCoordinates(Coordinates coordinates) {
                  |         this.coordinates = coordinates;
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–¥–∞—ë—Ç –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @param creationDate
                  |      */
                  |     public void setCreationDate(Date creationDate) {
                  |         this.creationDate = creationDate;
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–¥–∞—ë—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≥–µ—Ä–æ–µ–º
                  |      * @param realHero
                  |      */
                  |     public void setRealHero(boolean realHero) {
                  |         this.realHero = realHero;
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–¥–∞—ë—Ç –µ—Å—Ç—å –ª–∏ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –∑—É–±–Ω–∞—è –±–æ–ª—å
                  |      * @param hasToothpick
                  |      */
                  |     public void setHasToothpick(boolean hasToothpick) {
                  |         this.hasToothpick = hasToothpick;
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–¥–∞—ë—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —É–¥–∞—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @param impactSpeed
                  |      */
                  |     public void setImpactSpeed(Long impactSpeed) {
                  |         this.impactSpeed = impactSpeed;
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–¥–∞—ë—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞—É–Ω–¥—Ç—Ä–µ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @param soundtrackName
                  |      */
                  |     public void setSoundtrackName(String soundtrackName) {
                  |         this.soundtrackName = soundtrackName;
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–¥–∞—ë—Ç —Ç–∏–ø –æ—Ä—É–∂–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @param weaponType
                  |      */
                  |     public void setWeaponType(WeaponType weaponType) {
                  |         this.weaponType = weaponType;
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–¥–∞—ë—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @param mood
                  |      */
                  |     public void setMood(Mood mood) {
                  |         this.mood = mood;
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–¥–∞—ë—Ç –º–∞—à–∏–Ω—É —ç–ª–µ–º–µ–Ω—Ç–∞
                  |      * @param car
                  |      */
                  |     public void setCar(Car car) {
                  |         this.car = car;
                  |     }
                  | 
                  |     public int getOwnerId() {
                  |         return ownerId;
                  |     }
                  | 
                  |     public void setOwnerId(int ownerId) {
                  |         this.ownerId = ownerId;
                  |     }
                  | 
                  |     /**
                  |      * –°—Ä–∞–≤–Ω–≤–∞–µ—Ç –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞
                  |      * @param comp –æ–±—ä–µ–∫—Ç —Å –∫–æ—Ç–æ—Ä—ã–º —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç
                  |      * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                  |      */
                  |     @Override
                  |     public int compareTo(HumanBeing comp) {
                  |         return (this.mood.getPointOfHappy() - comp.mood.getPointOfHappy()) + (this.weaponType.getDegreeOfCool() - comp.weaponType.getDegreeOfCool());
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
                  |      * @return
                  |      */
                  |     @Override
                  |     public String toString() {
                  |         return "ID: " + id + "\nCreationDate: " + creationDate + "\nName: " + name + "\n" + coordinates + "\nCreationDate: " + creationDate + "\nRealHero: " + realHero + "\nHasToothpick: " + hasToothpick + "\nImpactSpeed: " + impactSpeed + "\nSoundtrackName: " + soundtrackName + "\nWeaponType: " + weaponType + "\nMood: " + mood + "\n" + car;
                  |     }
                  | 
                  |     @Override
                  |     public boolean equals(Object o) {
                  |         if (o == null || getClass() != o.getClass()) return false;
                  |         HumanBeing that = (HumanBeing) o;
                  |         return isRealHero() == that.isRealHero() && isHasToothpick() == that.isHasToothpick() && Objects.equals(getName(), that.getName()) && Objects.equals(getCoordinates(), that.getCoordinates()) && Objects.equals(getImpactSpeed(), that.getImpactSpeed()) && Objects.equals(getSoundtrackName(), that.getSoundtrackName()) && getWeaponType() == that.getWeaponType() && getMood() == that.getMood() && Objects.equals(getCar(), that.getCar());
                  |     }
                  | 
                  |     @Override
                  |     public int hashCode() {
                  |         return Objects.hash(getName(), getCoordinates(), isRealHero(), isHasToothpick(), getImpactSpeed(), getSoundtrackName(), getWeaponType(), getMood(), getCar());
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (HumanBeing.java) ---

                üìÑ Pair.java (300 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (Pair.java) ---
                  | package classes;
                  | 
                  | public class Pair<K, V> {
                  |     private K key;
                  |     private V value;
                  | 
                  |     public Pair(K key, V value) {
                  |         this.key = key;
                  |         this.value = value;
                  |     }
                  |     public K getKey() {
                  |         return key;
                  |     }
                  |     public V getValue() {
                  |         return value;
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (Pair.java) ---

                üìÑ Passwords.java (523 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (Passwords.java) ---
                  | package classes;
                  | 
                  | import java.util.HashMap;
                  | import java.util.Map;
                  | 
                  | @Deprecated(forRemoval = true)
                  | public class Passwords {
                  |     public Map<String, String> passwords = new HashMap<>();
                  | 
                  |     public Passwords() {
                  |         this.passwords = new HashMap<>();
                  |     }
                  | 
                  |     public boolean putUser (String username, String hashedPassword) {
                  |         boolean result = false;
                  |         if (!passwords.containsKey(username)) {
                  |             passwords.put(username, hashedPassword);
                  |         }
                  |         return result;
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (Passwords.java) ---

                üìÑ User.java (358 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (User.java) ---
                  | package classes;
                  | 
                  | public class User {
                  |     private String login;
                  |     private String password;
                  | 
                  |     public User(String login, String password) {
                  |         this.login = login;
                  |         this.password = password;
                  |     }
                  | 
                  |     public String getLogin() {
                  |         return login;
                  |     }
                  | 
                  |     public String getPassword() {
                  |         return password;
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (User.java) ---

            üìÇ commands/
                üìÑ AddElementCommand.java (1247 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (AddElementCommand.java) ---
                  | package commands;
                  | 
                  | import classes.HumanBeing;
                  | import utils.BuildersOfElement;
                  | 
                  | import java.nio.file.AccessDeniedException;
                  | import java.rmi.AccessException;
                  | import java.util.Scanner;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class AddElementCommand extends Command {
                  | 
                  |     private String desc = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é";
                  |     private String name = "add";
                  | 
                  |     private Scanner sc;
                  | 
                  |     int expected = 0;
                  | 
                  |     static HumanBeing toAdd = null;
                  |     static BuildersOfElement b = new BuildersOfElement();
                  | 
                  |     public AddElementCommand() {
                  |         super();
                  |         this.nameOfCommand = name;
                  |         this.numberOfArgs = expected;
                  |         this.description = desc;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String line) {
                  | //        BuildersOfElement b = new BuildersOfElement();
                  | //        toAdd = b.createNoAdd(true, sc, null);
                  |         cm.add(toAdd);
                  | //        db.add(toAdd, username);
                  |     }
                  | 
                  |     @Override
                  |     public Boolean bodyOfDBCommand(String argument) throws AccessException, AccessDeniedException {
                  | //        BuildersOfElement b = new BuildersOfElement();
                  |         toAdd = b.createNoAdd(true, sc, null);
                  |         return db.add(toAdd, username);
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (AddElementCommand.java) ---

                üìÑ AddIfMinCommand.java (3039 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (AddIfMinCommand.java) ---
                  | package commands;
                  | 
                  | import classes.HumanBeing;
                  | import utils.BuildersOfElement;
                  | 
                  | import java.nio.file.AccessDeniedException;
                  | import java.rmi.AccessException;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class AddIfMinCommand extends Command {
                  | 
                  |     private String desc = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —Ç–æ–≥–æ, —á—Ç–æ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º";
                  |     private String name = "add_if_min";
                  | 
                  |     int expected = 0;
                  | 
                  |     static HumanBeing toAdd = null;
                  |     private static BuildersOfElement b = new BuildersOfElement();
                  | 
                  |     public AddIfMinCommand() {
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |         this.numberOfArgs = expected;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String line) {
                  | //        BuildersOfElement b = new BuildersOfElement();
                  | //        HumanBeing h = b.createNoAdd(true, sc, null);
                  | //        System.out.println("–ù–∞—á–∞—Ç–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
                  | //        HumanBeing min = cm.findMin();
                  | //        if (h.compareTo(min) < 0) {
                  | //            cm.updateID(min.getId(), h);
                  | //            db.updateID(min.getId(), h, username);
                  | //            System.out.println("–≠–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é");
                  | //        } else {
                  | //            System.out.println("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Ç–∞–∫ –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–º–µ–Ω—å—à–∏–º");
                  | //        }
                  |         cm.add(toAdd);
                  |     }
                  | 
                  |     @Override
                  |     public Boolean bodyOfDBCommand(String argument) throws AccessException, AccessDeniedException {
                  |         toAdd = b.createNoAdd(true, sc, null);
                  |         System.out.println("–ù–∞—á–∞—Ç–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
                  |         HumanBeing min = cm.findMin();
                  |         if (toAdd.compareTo(min) < 0) {
                  |             Boolean b = db.add(toAdd, username);
                  |             System.out.println("–≠–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é");
                  |             return b;
                  |         } else {
                  |             System.out.println("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Ç–∞–∫ –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–º–µ–Ω—å—à–∏–º");
                  |             return false;
                  |         }
                  |     }
                  |     //    @Override
                  | //    public void execute(String argument) {
                  | //        String[] arguments = argument.split(" ");
                  | //        if (arguments.length != expected) {
                  | //            throw new IncorrectArgsNumber(expected);
                  | //        }
                  | //    }
                  | //
                  | //    @Override
                  | //    public void execute() {
                  | //        boolean b = true;
                  | //        HumanBeing being = new HumanBeing(b);
                  | //        HumanBeing min = cm.findMin();
                  | //        if (being.compareTo(min) < 0) {
                  | //            cm.updateID(min.getId(), being);
                  | //            System.out.println("–≠–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é");
                  | //        } else {
                  | //            System.out.println("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Ç–∞–∫ –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–º–µ–Ω—å—à–∏–º");
                  | //        }
                  | //    }
                  | 
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (AddIfMinCommand.java) ---

                üìÑ ClearCommand.java (1215 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (ClearCommand.java) ---
                  | package commands;
                  | 
                  | import java.nio.file.AccessDeniedException;
                  | import java.rmi.AccessException;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class ClearCommand extends Command {
                  | 
                  |     private String desc = "–û—á–∏—Å—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏";
                  |     private String name = "clear";
                  |     private int expected = 0;
                  | 
                  |     public ClearCommand() {
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |         this.numberOfArgs = expected;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String line) {
                  |         cm.clear();
                  | //        db.clear(username);
                  |         System.out.println("–ö–æ–ª–ª–µ–∫—Ü–∏—è –æ—á–∏—â–µ–Ω–∞");
                  |     }
                  | 
                  |     @Override
                  |     public Boolean bodyOfDBCommand(String argument) throws AccessException, AccessDeniedException {
                  |         return db.clear(argument);
                  |     }
                  | 
                  |     //    @Override
                  | //    public void execute(String argument) {
                  | //        String[] arguments = argument.split(" ");
                  | //        if (arguments.length != expected) {
                  | //            throw new IncorrectArgsNumber(expected);
                  | //        }
                  | //    }
                  | //
                  | //    @Override
                  | //    public void execute() {
                  | //        cm.clear();
                  | //        System.out.println("–ö–æ–ª–ª–µ–∫—Ü–∏—è –æ—á–∏—â–µ–Ω–∞");
                  | //    }
                  | 
                  | 
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (ClearCommand.java) ---

                üìÑ Command.java (3191 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (Command.java) ---
                  | package commands;
                  | 
                  | import exceptions.IncorrectArgsNumber;
                  | import managers.CollectionManager;
                  | import managers.DBManager;
                  | import run.Main;
                  | 
                  | import java.nio.file.AccessDeniedException;
                  | import java.rmi.AccessException;
                  | import java.util.Scanner;
                  | 
                  | ;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public abstract class Command {
                  | 
                  |     protected static CollectionManager cm = Main.cm;
                  | 
                  |     protected static DBManager db = Main.db;
                  | 
                  |     protected static String username;
                  | 
                  |     Scanner sc = Main.sc;
                  | 
                  |     protected String splite = "----------";
                  | 
                  |     protected String description;
                  |     protected String nameOfCommand;
                  | 
                  |     protected int numberOfArgs;
                  | 
                  |     public Command() {
                  |         this.description = description;
                  |         this.nameOfCommand = nameOfCommand;
                  |         this.numberOfArgs = numberOfArgs;
                  |     }
                  | 
                  |     ////    @Override
                  | //    public void execute(String args) {}
                  | //
                  | ////    @Override
                  | //    public void execute() {}
                  | //
                  | ////    @Override
                  | //    public void execute(String args, Scanner sc) {}
                  | //
                  | ////    @Override
                  | //    public void execute(Scanner sc) {}
                  | 
                  |     public void execute(String argument) throws AccessDeniedException, AccessException {
                  |         if ((argument.trim().isEmpty() && numberOfArgs == 0) || (!argument.trim().isEmpty() && numberOfArgs == 1) || (!argument.trim().isEmpty() && numberOfArgs == 3)) {
                  |             setUsernameAgain();
                  |             Boolean b = bodyOfDBCommand(argument);
                  |             if (b == null) {
                  |                 bodyOfCommand(argument);
                  |             } else if (b == true) {
                  | //                bodyOfCommand(argument);
                  |                 CollectionManager.collection = db.getCollection();
                  |             } else if (b == false) {
                  |                 CollectionManager.collection = db.getCollection();
                  |             }
                  |             CollectionManager.collection = db.getCollection();
                  |         } else {
                  |             throw new IncorrectArgsNumber(numberOfArgs);
                  |         }
                  | 
                  |             /*
                  |             if (argument.trim().isEmpty() && numberOfArgs != 0) {
                  |             throw new IncorrectArgsNumber(numberOfArgs);
                  |         } else if (!argument.trim().isEmpty() && numberOfArgs == 0) {
                  |             throw new IncorrectArgsNumber(numberOfArgs);
                  |         } else if (!argument.trim().isEmpty() && numberOfArgs == 1) {
                  |             bodyOfCommand(argument);
                  |         } else if (argument.trim().isEmpty() && numberOfArgs == 2) {
                  |             throw new IncorrectArgsNumber(numberOfArgs);
                  |         } else if (!argument.trim().isEmpty() && numberOfArgs == 3) {}
                  |         bodyOfCommand(argument);
                  |              */
                  |     }
                  |     public void bodyOfCommand(String argument) throws AccessException, AccessDeniedException {}
                  | 
                  |     public Boolean bodyOfDBCommand(String argument) throws AccessException, AccessDeniedException {
                  |         return null;
                  |     }
                  | 
                  | //    @Override
                  |     public void description() {
                  |         String ret = nameOfCommand + " - " + description;
                  |         System.out.println(ret);
                  |     }
                  | 
                  |     public String getDescription() {
                  |         return description;
                  |     }
                  | 
                  |     public String getNameOfCommand() {
                  |         return nameOfCommand;
                  |     }
                  | 
                  |     public static void setUsernameAgain() {
                  |         username = Main.username;
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (Command.java) ---

                üìÑ CountGreaterThanMoodCommand.java (1123 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (CountGreaterThanMoodCommand.java) ---
                  | package commands;
                  | 
                  | import enums.Mood;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class CountGreaterThanMoodCommand extends Command {
                  | 
                  |     private String desc = "–í—ã–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö —Ö—É–∂–µ, —á–µ–º –∑–∞–¥–∞–Ω–Ω–æ–µ";
                  |     private String name = "count_greater_than_mood";
                  |     private int expected = 1;
                  | 
                  |     public CountGreaterThanMoodCommand() {
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |         this.numberOfArgs = expected;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String argument) {
                  |         System.out.println("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: " + Mood.getV());
                  |         cm.countGreaterThanMood(Mood.valueOf(argument.toUpperCase()));
                  |     }
                  | 
                  | //    @Override
                  | //    public void execute(String argument) {
                  | //        String[] arguments = argument.split(" ");
                  | //        if (arguments.length != expected) {
                  | //            throw new IncorrectArgsNumber(expected);
                  | //        }
                  | //        cm.countGreaterThanMood(Mood.valueOf(arguments[0]));
                  | //    }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (CountGreaterThanMoodCommand.java) ---

                üìÑ ExecuteScriptFromFileCommand.java (1094 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (ExecuteScriptFromFileCommand.java) ---
                  | package commands;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class ExecuteScriptFromFileCommand extends Command {
                  | 
                  |     private String desc = "–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø –∏–∑ —Ñ–∞–π–ª–∞";
                  |     private String name = "execute_script";
                  | 
                  |     int expected = 1;
                  | 
                  |     public ExecuteScriptFromFileCommand() {
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |         this.numberOfArgs = expected;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String argument) {
                  |         cm.executeScriptFromFilename(argument);
                  |     }
                  | 
                  |     //    @Override
                  | //    public void execute(String argument) {
                  | //        String[] arguments = argument.split(" ");
                  | //        if (arguments.length != expected) {
                  | //            throw new IncorrectArgsNumber(expected);
                  | //        }
                  | //        cm.executeScriptFromFilename(arguments[0]);
                  | ////        System.out.println("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ —Ñ–∞–π–ª–∞: " + arguments[0] + "–±—ã–ª–∞ —É—Å–ø–µ—à–Ω–∞");
                  | //    }
                  | //
                  | //    @Override
                  | //    public void execute() {
                  | //        throw new IncorrectArgsNumber(expected);
                  | //    }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (ExecuteScriptFromFileCommand.java) ---

                üìÑ ExitCommand.java (972 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (ExitCommand.java) ---
                  | package commands;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class ExitCommand extends Command {
                  | 
                  |     private String desc = "–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã";
                  |     private String name = "exit";
                  | 
                  |     public ExitCommand() {
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String argument) {
                  |         System.out.println("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã....");
                  |         cm.exit();
                  |     }
                  | 
                  |     //    @Override
                  | //    public void execute(String argument) {
                  | //        int expected = 1;
                  | //        String[] arguments = argument.split(" ");
                  | //        if (arguments.length != expected) {
                  | //            throw new IncorrectArgsNumber(expected);
                  | //        }
                  | //    }
                  | //
                  | //    @Override
                  | //    public void execute() {
                  | //        System.out.println("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã....");
                  | //        cm.exit();
                  | //    }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (ExitCommand.java) ---

                üìÑ HelpCommand.java (1411 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (HelpCommand.java) ---
                  | package commands;
                  | 
                  | import functions.Invoker;
                  | import run.Main;
                  | 
                  | import java.util.Map;
                  | 
                  | ;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class HelpCommand extends Command{
                  | 
                  |     private String desc = "–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É –Ω–∞ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã";
                  |     private String name = "help";
                  |     private int expected = 0;
                  | 
                  |     public HelpCommand(){
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |         this.numberOfArgs = expected;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String argument) {
                  |         Invoker.adder();
                  |         Map<String, Command> commands = Main.inv.commands;
                  | 
                  |         for (Command command : commands.values()) {
                  |             command.description();
                  |         }
                  |     }
                  | 
                  |     //    @Override
                  | //    public void execute(String argument) {
                  | //        int expected = 0;
                  | //        String[] arguments = argument.split(" ");
                  | //        if (arguments.length != expected) {
                  | //            throw new IncorrectArgsNumber(expected);
                  | //        }
                  | ////        cm.clear();
                  | ////        System.out.println("–ö–æ–ª–ª–µ–∫—Ü–∏—è –æ—á–∏—â–µ–Ω–∞");
                  | //    }
                  | //
                  | //    @Override
                  | //    public void execute() {
                  | //        Invoker.adder();
                  | //        Map<String, Command> commands = run.Main.inv.commands;
                  | //
                  | //        for (Command command : commands.values()) {
                  | //            command.description();
                  | //        }
                  | //    }
                  | 
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (HelpCommand.java) ---

                üìÑ InfoCommand.java (1706 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (InfoCommand.java) ---
                  | package commands;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class InfoCommand extends Command {
                  | 
                  |     private String desc = "–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É –ø—Ä–æ –∫–æ–ª–ª–µ–∫—Ü–∏—é";
                  |     private String name = "info";
                  |     private int expected = 0;
                  | 
                  |     public InfoCommand() {
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |         this.numberOfArgs = expected;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String argument) {
                  |         String in = "–¢–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏: " + cm.collection.getClass() + ", –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: " + cm.getInitialazed() + " –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: " + cm.collection.size();
                  |         System.out.println(in);
                  |     }
                  | 
                  |     //    @Override
                  | //    public void execute(String argument) {
                  | //
                  | //        String in = "–¢–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏: " + cm.collection.getClass() + ", –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: " + cm.getInitialazed() + " –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: " + cm.collection.size();
                  | //
                  | //        try{
                  | //            int expected = 0;
                  | //            String[] arguments = argument.split(" ");
                  | //            if (arguments.length != expected) {
                  | //                throw new IncorrectArgsNumber(expected);
                  | //            }
                  | //            System.out.println(in);
                  | //        } catch (IncorrectArgsNumber e) {
                  | //            System.out.println(e.getMessage());
                  | //        }
                  | //    }
                  | //
                  | //    @Override
                  | //    public void execute() {
                  | //        String in = "–¢–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏: " + cm.collection.getClass() + ", –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: " + cm.getInitialazed() + " –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: " + cm.collection.size();
                  | //        System.out.println(in);
                  | //    }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (InfoCommand.java) ---

                üìÑ LoginCommand.java (712 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (LoginCommand.java) ---
                  | package commands;
                  | 
                  | import java.nio.file.AccessDeniedException;
                  | import java.rmi.AccessException;
                  | 
                  | public class LoginCommand  extends Command {
                  |     private String desc = "–í—Ö–æ–¥ –ø–æ–¥ –ø–∞—Ä–æ–ª–µ–º –∏ –ª–æ–≥–∏–Ω–æ–º";
                  |     private String name = "login";
                  |     private int expected = 1;
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String argument) throws AccessDeniedException {
                  |         String[] split = argument.split(" ");
                  |         boolean res = db.login(split[0], split[1]);
                  |         if(res) {
                  |             System.out.println("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                  |         } else {
                  |             throw new AccessDeniedException("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É");
                  |         }
                  |     }
                  | 
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (LoginCommand.java) ---

                üìÑ MinBySoundtrackNameCommand.java (952 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (MinBySoundtrackNameCommand.java) ---
                  | package commands;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class MinBySoundtrackNameCommand extends Command {
                  | 
                  |     private String desc = "–í—ã–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ–ª—è soundtrackName";
                  |     private String name = "min_by_soundtrack_name";
                  |     private int expected = 0;
                  | 
                  |     public MinBySoundtrackNameCommand() {
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |         this.numberOfArgs = expected;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String argument) {
                  |         cm.minBySoundtrackName();
                  |     }
                  | 
                  |     //    @Override
                  | //    public void execute(String argument) {
                  | //        int expected = 1;
                  | //        String[] arguments = argument.split(" ");
                  | //        if (arguments.length != expected) {
                  | //            throw new IncorrectArgsNumber(expected);
                  | //        }
                  | //        cm.minBySoundtrackName();
                  | //    }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (MinBySoundtrackNameCommand.java) ---

                üìÑ ReadCommand.java (1135 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (ReadCommand.java) ---
                  | package commands;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class ReadCommand extends Command {
                  |     private String desc = "–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ json —Ñ–∞–π–ª–∞";
                  |     private String name = "read";
                  |     private int expected = 1;
                  | 
                  |     public ReadCommand() {
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |         this.numberOfArgs = expected;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String argument) {
                  |         cm.readJson(argument);
                  |         System.out.println("–ö–æ–ª–ª–µ–∫—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞");
                  |     }
                  | 
                  |     //    @Override
                  | //    public void execute(String argument) {
                  | //        String[] arguments = argument.split(" ");
                  | //        if (arguments.length != expected) {
                  | //            throw new IncorrectArgsNumber(expected);
                  | //        }
                  | //        cm.readJson(arguments[0]);
                  | //        System.out.println("–ö–æ–ª–ª–µ–∫—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞");
                  | //    }
                  | //
                  | //    @Override
                  | //    public void execute() {
                  | //        throw new IncorrectArgsNumber(expected);
                  | //    }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (ReadCommand.java) ---

                üìÑ ReadEnvCommand.java (874 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (ReadEnvCommand.java) ---
                  | package commands;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class ReadEnvCommand extends Command {
                  |     private String desc = "–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã";
                  |     private String name = "readEnv";
                  |     private int expected = 0;
                  | 
                  |     public ReadEnvCommand() {
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |         this.numberOfArgs = expected;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String argument) {
                  |         cm.readEnv();
                  |     }
                  | 
                  |     //    @Override
                  | //    public void execute(String argument) {
                  | //        int expected = 0;
                  | //        String[] arguments = argument.split(" ");
                  | //        if (arguments.length != expected) {
                  | //            throw new IncorrectArgsNumber(expected);
                  | //        }
                  | //    }
                  | //
                  | //    @Override
                  | //    public void execute() {
                  | //        cm.readEnv();
                  | //    }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (ReadEnvCommand.java) ---

                üìÑ RegisterUserCommand.java (560 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (RegisterUserCommand.java) ---
                  | package commands;
                  | 
                  | import run.Main;
                  | 
                  | public class RegisterUserCommand extends Command {
                  |     private String desc = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è";
                  |     private String name = "reg";
                  |     private int expected = 3;
                  | 
                  |     public RegisterUserCommand() {
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |         this.numberOfArgs = expected;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String argument) {
                  |         String[] split = argument.split(" ");
                  |         db.registerUser(split[0], split[1]);
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (RegisterUserCommand.java) ---

                üìÑ RemoveAnyByMoodCommand.java (1349 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (RemoveAnyByMoodCommand.java) ---
                  | package commands;
                  | 
                  | import enums.Mood;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class RemoveAnyByMoodCommand extends Command {
                  |     private String desc = "–£–¥–∞–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–Ω–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É";
                  |     private String name = "remove_any_by_mood";
                  |     private int expected = 1;
                  | 
                  |     public RemoveAnyByMoodCommand() {
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |         this.numberOfArgs = expected;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String argument) {
                  |         try {
                  |             cm.removeAnyByMood(Mood.valueOf(argument));
                  |             db.removeAnyByMood(username, argument);
                  |         } catch (IndexOutOfBoundsException e) {
                  |             System.out.println("–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –∏–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–µ—Ç");
                  |         }
                  |     }
                  | 
                  |     //    @Override
                  | //    public void execute(String argument) {
                  | //        int expected = 1;
                  | //        String[] arguments = argument.split(" ");
                  | //        if (arguments.length != expected) {
                  | //            throw new IncorrectArgsNumber(expected);
                  | //        }
                  | //        cm.removeAnyByMood(Mood.valueOf(arguments[1]));
                  | //    }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (RemoveAnyByMoodCommand.java) ---

                üìÑ RemoveByIDCommand.java (1372 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (RemoveByIDCommand.java) ---
                  | package commands;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class RemoveByIDCommand extends Command {
                  |     private String desc = "–£–¥—è–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º ID";
                  |     private String name = "remove_by_id";
                  |     private int expected = 1;
                  | 
                  |     public RemoveByIDCommand() {
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |         this.numberOfArgs = expected;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String argument) {
                  |         try {
                  |             cm.removeById(Integer.parseInt(argument));
                  |             db.removeByID(username, Integer.parseInt(argument));
                  |         } catch (IndexOutOfBoundsException e) {
                  |             System.out.println("–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç");
                  |         }
                  |     }
                  | 
                  |     //    @Override
                  | //    public void execute(String argument) {
                  | //        try {
                  | //            int expected = 1;
                  | //            String[] arguments = argument.split(" ");
                  | //            if (arguments.length != expected) {
                  | //                throw new IncorrectArgsNumber(expected);
                  | //            }
                  | //            cm.removeById(Integer.parseInt(arguments[0]));
                  | //        } catch (IndexOutOfBoundsException e){
                  | //            System.out.println("–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç");
                  | //        }
                  | //    }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (RemoveByIDCommand.java) ---

                üìÑ RemoveFirstCommand.java (833 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (RemoveFirstCommand.java) ---
                  | package commands;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class RemoveFirstCommand extends Command {
                  |     private String desc = "–£–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏";
                  |     private String name = "remove_first";
                  |     private int expected = 0;
                  | 
                  |     public RemoveFirstCommand() {
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String argument) {
                  |         cm.removeFirst();
                  | //        db.removeFirst(username);
                  |     }
                  | 
                  | 
                  |     //    @Override
                  | //    public void execute(String argument) {
                  | //        int expected = 0;
                  | //        String[] arguments = argument.split(" ");
                  | //        if (arguments.length != expected) {
                  | //            throw new IncorrectArgsNumber(expected);
                  | //        }
                  | //        cm.removeFirst();
                  | //    }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (RemoveFirstCommand.java) ---

                üìÑ SaveToFileCommand.java (2084 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (SaveToFileCommand.java) ---
                  | package commands;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class SaveToFileCommand extends Command {
                  | 
                  |     private String desc = "–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é  –≤ —Ñ–∞–π–ª –ø–æ—Ä–º–∞—Ç–∞ json";
                  |     private String name = "save";
                  | 
                  |     int expected = 1;
                  | 
                  |     public SaveToFileCommand() {
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |         this.numberOfArgs = expected;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String argument) {
                  |         cm.saveToFile(argument);
                  |     }
                  | 
                  |     //    @Override
                  | //    public void execute() {
                  | //        ArrayList<HumanBeing> data = cm.getCollection();
                  | //        EnvFileWriter fileWriter = new EnvFileWriter();
                  | //        fileWriter.writeData(data);
                  | //        System.out.println("–ö–æ–ª–ª–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª.");
                  | //    }
                  | //    @Override
                  | //    public void execute(String args) {
                  | //        int expected = 1;
                  | //        String[] arguments = args.split(" ");
                  | //        if (arguments.length != expected) {
                  | //            throw new IncorrectArgsNumber(expected);
                  | //        }
                  | //        ArrayList<HumanBeing> data = cm.getCollection();
                  | //        EnvFileWriter fileWriter = new EnvFileWriter();
                  | //        fileWriter.writeData(data);
                  | //        System.out.println("–ö–æ–ª–ª–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª.");
                  | //    }
                  | 
                  | 
                  | //    @Override
                  | //    public void execute(String argument) {
                  | //        String[] arguments = argument.split(" ");
                  | //        if (arguments.length != expected) {
                  | //            throw new IncorrectArgsNumber(expected);
                  | //        }
                  | ////        cm.saveToFile(arguments[0]);
                  | //
                  | //        try {
                  | //            cm.saveToFile(arguments[0]);
                  | //        } catch (NullPointerException e) {
                  | //            System.out.println("dfs");
                  | //        }
                  | //
                  | //        System.out.println("–ö–æ–ª–ª–µ–∫—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ —Ñ–∞–π–ª " + arguments[0]);
                  | //    }
                  | //
                  | //    @Override
                  | //    public void execute() {
                  | //        throw new IncorrectArgsNumber(expected);
                  | //    }
                  | 
                  | }
                  | 
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (SaveToFileCommand.java) ---

                üìÑ ShowCommand.java (1200 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (ShowCommand.java) ---
                  | package commands;
                  | 
                  | import classes.HumanBeing;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class ShowCommand extends Command {
                  | 
                  |     private String desc = "–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–ª–ª–ª–µ–∫—Ü–∏–∏";
                  |     private String name = "show";
                  |     private int expected = 0;
                  | 
                  |     public ShowCommand() {
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |         this.numberOfArgs = expected;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String argument) {
                  |         for (HumanBeing hb : cm.collection){
                  |             System.out.println(splite);
                  |             System.out.println(hb);
                  |         }
                  |         System.out.println(splite);
                  |     }
                  | 
                  |     //    @Override
                  | //    public void execute(String argument) {
                  | //        int expected = 0;
                  | //        String[] arguments = argument.split(" ");
                  | //        if (arguments.length != expected) {
                  | //            throw new IncorrectArgsNumber(expected);
                  | //        }
                  | //    }
                  | //
                  | //    @Override
                  | //    public void execute() {
                  | //        for (HumanBeing hb : cm.collection){
                  | //            System.out.println(splite);
                  | //            System.out.println(hb);
                  | //        }
                  | //        System.out.println(splite);
                  | //    }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (ShowCommand.java) ---

                üìÑ SortCommand.java (966 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (SortCommand.java) ---
                  | package commands;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class SortCommand extends Command {
                  | 
                  |     private String desc = "–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏";
                  |     private String name = "sort";
                  |     private int expected = 0;
                  | 
                  |     public SortCommand() {
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |         this.numberOfArgs = expected;
                  |     }
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String argument) {
                  |         cm.sort();
                  |         System.out.println("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
                  |     }
                  | 
                  |     //    @Override
                  | //    public void execute(String argument) {
                  | //        int expected = 0;
                  | //        String[] arguments = argument.split(" ");
                  | //        if (arguments.length != expected) {
                  | //            throw new IncorrectArgsNumber(expected);
                  | //        }
                  | //        cm.sort();
                  | //        System.out.println("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!");
                  | //    }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (SortCommand.java) ---

                üìÑ UpdateIDCommand.java (2202 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (UpdateIDCommand.java) ---
                  | package commands;
                  | 
                  | import classes.HumanBeing;
                  | import utils.BuildersOfElement;
                  | 
                  | import java.nio.file.AccessDeniedException;
                  | import java.rmi.AccessException;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class UpdateIDCommand extends Command {
                  | 
                  |     private String desc = "–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º ID";
                  |     private String name = "update_id";
                  |     private int expected = 1;
                  | 
                  |     public UpdateIDCommand() {
                  |         this.nameOfCommand = name;
                  |         this.description = desc;
                  |         this.numberOfArgs = expected;
                  |     }
                  | 
                  |     static HumanBeing toAdd = null;
                  |     static BuildersOfElement b = new BuildersOfElement();
                  | 
                  |     @Override
                  |     public void bodyOfCommand(String argument) {
                  | //        try {
                  | //            int id = Integer.parseInt(argument);
                  | //            System.out.println("–ù–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ ID");
                  | //            BuildersOfElement b = new BuildersOfElement();
                  | //            HumanBeing h = b.createNoAdd(true, sc, null);
                  | //            cm.updateID(id, h);
                  | //            db.updateID(id, h, username);
                  | //        } catch (NumberFormatException e) {
                  | //            System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π ID");
                  | //        }
                  |     }
                  | 
                  |     @Override
                  |     public Boolean bodyOfDBCommand(String argument) throws AccessException, AccessDeniedException {
                  |         toAdd = b.createNoAdd(true, sc, null);
                  |         return db.updateID(Integer.parseInt(argument), toAdd, username);
                  |     }
                  |     //    @Override
                  | //    public void execute(String argument) {
                  | //        String[] arguments = argument.split(" ");
                  | //        if (arguments.length != expected) {
                  | //            throw new IncorrectArgsNumber(expected);
                  | //        }
                  | //        try{
                  | //            int id = Integer.parseInt(arguments[0]);
                  | //            System.out.println("–ù–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ ID");
                  | //            AddElementCommand ad = new AddElementCommand();
                  | //            cm.updateID(Integer.parseInt(arguments[0]), ad.createNoAdd());
                  | //        } catch (NumberFormatException e) {
                  | //            System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π ID");
                  | //        }
                  | //    }
                  | 
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (UpdateIDCommand.java) ---

            üìÇ enums/
                üìÑ Mood.java (788 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (Mood.java) ---
                  | package enums;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public enum Mood {
                  |     SADNESS(2),
                  |     SORROW(1),
                  |     GLOOM(0),
                  |     CALM(3);
                  | 
                  |     private final int pointOfHappy;
                  | 
                  |     Mood(int pointOfHappy) {
                  |         this.pointOfHappy = pointOfHappy;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å—á–∞—Å—Ç—å—è
                  |      * @return —É—Ä–æ–≤–µ–Ω—å —Å—á–∞—Å—Ç—å—è
                  |      */
                  |     public int getPointOfHappy() {
                  |         return pointOfHappy;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                  |      * @return –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                  |      */
                  |     public static String getV(){
                  |         String v = "";
                  |         for (Mood wt : Mood.values()){
                  |             v += wt.toString() + " ";
                  |         }
                  |         return v;
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (Mood.java) ---

                üìÑ WeaponType.java (753 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (WeaponType.java) ---
                  | package enums;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public enum WeaponType {
                  |     HAMMER (2),
                  |     AXE (3),
                  |     PISTOL (4),
                  |     SHOTGUN (5),
                  |     KNIFE (1);
                  | 
                  |     private final int degreeOfCool;
                  | 
                  |     WeaponType(int degreeOfCool) {
                  |         this.degreeOfCool = degreeOfCool;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–µ–ø–µ–Ω—å –∫—Ä—É—Ç–æ—Å—Ç–∏ –æ—Ä—É–∂–∏—è.
                  |      * @return
                  |      */
                  |     public int getDegreeOfCool() {
                  |         return degreeOfCool;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è enum
                  |      * @return
                  |      */
                  |     public static String getV(){
                  |         String v = "";
                  |         for (WeaponType wt : WeaponType.values()){
                  |             v += wt.toString() + " ";
                  |         }
                  |         return v;
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (WeaponType.java) ---

            üìÇ exceptions/
                üìÑ IllegalScriptLine.java (281 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (IllegalScriptLine.java) ---
                  | package exceptions;
                  | 
                  | public class IllegalScriptLine extends RuntimeException {
                  | 
                  |     String message;
                  | 
                  |     public IllegalScriptLine(String message) {
                  |         this.message = message;
                  |     }
                  | 
                  |     @Override
                  |     public String getMessage() {
                  |         return message;
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (IllegalScriptLine.java) ---

                üìÑ IncorrectArgsNumber.java (433 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (IncorrectArgsNumber.java) ---
                  | package exceptions;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class IncorrectArgsNumber extends RuntimeException{
                  |     private final int number;
                  |     public IncorrectArgsNumber(int number) {
                  |         this.number = number;
                  |     }
                  | 
                  |     @Override
                  |     public String getMessage() {
                  |         return "–ê—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –æ–∂–∏–¥–∞–ª–æ—Å—å: " + number;
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (IncorrectArgsNumber.java) ---

                üìÑ NoAccessToElement.java (375 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (NoAccessToElement.java) ---
                  | package exceptions;
                  | 
                  | public class NoAccessToElement extends RuntimeException {
                  |     String username;
                  |     public NoAccessToElement(String username) {
                  |         this.username = username;
                  |     }
                  | 
                  |     @Override
                  |     public String getMessage() {
                  |         return "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É, –≤–∞—à –ª–æ–≥–∏–Ω - " + username;
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (NoAccessToElement.java) ---

                üìÑ NullCoordinatesException.java (217 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (NullCoordinatesException.java) ---
                  | package exceptions;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class NullCoordinatesException extends RuntimeException {
                  |   @Override
                  |   public String getMessage() {
                  |     return "Coordinates cannot be null";
                  |   }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (NullCoordinatesException.java) ---

                üìÑ NullStringException.java (274 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (NullStringException.java) ---
                  | package exceptions;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class NullStringException extends RuntimeException {
                  |     @Override
                  |     public String getMessage() {
                  |         return "–í—ã –≤–≤–µ–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!";
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (NullStringException.java) ---

                üìÑ WrongAddLineInScriptException.java (225 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (WrongAddLineInScriptException.java) ---
                  | package exceptions;
                  | 
                  | public class WrongAddLineInScriptException extends RuntimeException {
                  | 
                  |     @Override
                  |     public String getMessage() {
                  |         return "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤ —Å—Ç—Ä–æ–∫–µ —Ñ–∞–π–ª–∞";
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (WrongAddLineInScriptException.java) ---

                üìÑ WrongNameHumanBeingException.java (226 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (WrongNameHumanBeingException.java) ---
                  | package exceptions;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class WrongNameHumanBeingException extends RuntimeException {
                  |   @Override
                  |   public String getMessage() {
                  |     return "Human Being Name=null Exception";
                  |   }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (WrongNameHumanBeingException.java) ---

                üìÑ WrongNameSizeException.java (214 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (WrongNameSizeException.java) ---
                  | package exceptions;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class WrongNameSizeException extends RuntimeException {
                  |     @Override
                  |     public String getMessage() {
                  |         return "Wrong Name Size";
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (WrongNameSizeException.java) ---

            üìÇ functions/
                üìÑ Invoker.java (2847 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (Invoker.java) ---
                  | package functions;
                  | 
                  | import commands.*;
                  | 
                  | import java.util.HashMap;
                  | import java.util.Map;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class Invoker {
                  | 
                  |     /**
                  |      * –ö–ª–∞—Å—Å Invoker
                  |      * –í –Ω—ë–º —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                  |      */
                  | 
                  |     public Map<String, Command> commands = new HashMap<String, Command>();
                  | 
                  |     public static Map<String, Command> staticCommands = new HashMap<>();
                  | 
                  |     public Invoker() {
                  |         commands.put("help", new HelpCommand());
                  |         commands.put("info", new InfoCommand());
                  |         commands.put("show", new ShowCommand());
                  |         commands.put("add", new AddElementCommand());
                  |         commands.put("update_id", new UpdateIDCommand());
                  |         commands.put("remove_by_id", new RemoveByIDCommand());
                  |         commands.put("clear", new ClearCommand());
                  |         commands.put("save", new SaveToFileCommand());
                  |         commands.put("execute_script", new ExecuteScriptFromFileCommand());
                  |         commands.put("exit", new ExitCommand());
                  |         commands.put("remove_first", new RemoveFirstCommand());
                  |         commands.put("add_if_min", new AddIfMinCommand());
                  |         commands.put("sort", new SortCommand());
                  |         commands.put("remove_any_by_mood", new RemoveAnyByMoodCommand());
                  |         commands.put("min_by_soundtrack_name", new MinBySoundtrackNameCommand());
                  |         commands.put("count_greater_than_mood", new CountGreaterThanMoodCommand());
                  |         commands.put("read", new ReadCommand());
                  | //        commands.put("reg", new RegisterUserCommand());
                  | //        commands.put("login", new LoginCommand());
                  |     }
                  | 
                  |     public static void adder(){
                  |         staticCommands.put("help", new HelpCommand());
                  |         staticCommands.put("info", new InfoCommand());
                  |         staticCommands.put("show", new ShowCommand());
                  |         staticCommands.put("add", new AddElementCommand());
                  |         staticCommands.put("update_id", new UpdateIDCommand());
                  |         staticCommands.put("remove_by_id", new RemoveByIDCommand());
                  |         staticCommands.put("clear", new ClearCommand());
                  |         staticCommands.put("save", new SaveToFileCommand());
                  |         staticCommands.put("execute_script", new ExecuteScriptFromFileCommand());
                  |         staticCommands.put("exit", new ExitCommand());
                  |         staticCommands.put("remove_first", new RemoveFirstCommand());
                  |         staticCommands.put("add_if_min", new AddIfMinCommand());
                  |         staticCommands.put("sort", new SortCommand());
                  |         staticCommands.put("remove_any_by_mood", new RemoveAnyByMoodCommand());
                  |         staticCommands.put("min_by_soundtrack_name", new MinBySoundtrackNameCommand());
                  |         staticCommands.put("count_greater_than_mood", new CountGreaterThanMoodCommand());
                  |         staticCommands.put("read", new ReadCommand());
                  |         staticCommands.put("readEnv", new ReadEnvCommand());
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (Invoker.java) ---

                üìÑ TypeOfClassMap.java (1251 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (TypeOfClassMap.java) ---
                  | package functions;
                  | 
                  | import enums.Mood;
                  | import enums.WeaponType;
                  | 
                  | import java.util.HashMap;
                  | import java.util.Map;
                  | import java.util.function.Function;
                  | 
                  | public class TypeOfClassMap {
                  |     public static Map<Class<?>, Function<String, ?>> classMap = new HashMap<>();
                  | 
                  |     static {
                  |         classMap.put(Integer.class, Integer::parseInt);
                  |         classMap.put(Double.class, Double::parseDouble);
                  |         classMap.put(Float.class, Float::parseFloat);
                  |         classMap.put(Long.class, Long::parseLong);
                  |         classMap.put(Short.class, Short::parseShort);
                  |         classMap.put(Byte.class, Byte::parseByte);
                  |         classMap.put(WeaponType.class, WeaponType::valueOf);
                  |         classMap.put(String.class, String::valueOf); // classMap.put(String.class, Function.identity()); ?????
                  |         classMap.put(Mood.class, Mood::valueOf);
                  | //        classMap.put(Boolean.class, Boolean::parseBoolean);
                  |         classMap.put(Boolean.class, s -> {
                  |             if (s.equalsIgnoreCase("true") || s.equalsIgnoreCase("false")) {
                  |                 return Boolean.parseBoolean(s);
                  |             } else {
                  |                 throw new NumberFormatException("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è boolean: " + s);
                  |             }
                  |         });
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (TypeOfClassMap.java) ---

                üìÇ comparators/
                    üìÑ MoodComparator.java (686 bytes)
                      --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (MoodComparator.java) ---
                      | package functions.comparators;
                      | 
                      | import classes.HumanBeing;
                      | 
                      | import java.util.Comparator;
                      | 
                      | /**
                      |  * @author Dimasavr
                      |  */
                      | 
                      | public class MoodComparator implements Comparator<HumanBeing> {
                      |     /**
                      |      * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç 2 –æ–±—ä–µ–∫—Ç–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É mood
                      |      * @see enums.Mood
                      |      * @param o1 –ø–µ—Ä–∞–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                      |      * @param o2 –≤—Ç–æ—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                      |      * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
                      |      */
                      |     @Override
                      |     public int compare(HumanBeing o1, HumanBeing o2) {
                      |         return o1.getMood().getPointOfHappy() - o2.getMood().getPointOfHappy();
                      |     }
                      | }
                      --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (MoodComparator.java) ---

                    üìÑ SoundtrackNameComparator.java (580 bytes)
                      --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (SoundtrackNameComparator.java) ---
                      | package functions.comparators;
                      | 
                      | import classes.HumanBeing;
                      | 
                      | import java.util.Comparator;
                      | 
                      | /**
                      |  * @author Dimasavr
                      |  */
                      | 
                      | public class SoundtrackNameComparator implements Comparator<HumanBeing> {
                      |     /**
                      |      * @param o1 –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                      |      * @param o2 –≤—Ç–æ—Ä–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                      |      * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                      |      */
                      |     @Override
                      |     public int compare(HumanBeing o1, HumanBeing o2) {
                      |         return o1.getSoundtrackName().length() - o2.getSoundtrackName().length();
                      |     }
                      | }
                      --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (SoundtrackNameComparator.java) ---

                üìÇ filter/
                    üìÑ ColumnRowFilter.java (2373 bytes)
                      --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (ColumnRowFilter.java) ---
                      | package gui.filter; // –¢–≤–æ–π –ø–∞–∫–µ—Ç
                      | 
                      | import classes.HumanBeing;
                      | import gui.HBTable;
                      | import javax.swing.RowFilter;
                      | import java.util.Objects;
                      | import java.util.stream.Stream;
                      | 
                      | public class ColumnRowFilter extends RowFilter<HBTable, Integer> {
                      |     private String searchText;
                      |     private int columnIndexToFilter; // –≠—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
                      |     private HBTable tableModel;
                      | 
                      |     public ColumnRowFilter(String searchText, int columnIndexToFilter, HBTable model) {
                      |         this.searchText = searchText.toLowerCase().trim();
                      |         this.columnIndexToFilter = columnIndexToFilter;
                      |         this.tableModel = model;
                      |     }
                      | 
                      |     @Override
                      |     public boolean include(Entry<? extends HBTable, ? extends Integer> entry) {
                      |         if (searchText.isEmpty()) {
                      |             return true;
                      |         }
                      | 
                      |         HumanBeing human = tableModel.getHumanBeingAt(entry.getIdentifier());
                      |         if (human == null) {
                      |             return false;
                      |         }
                      | 
                      |         Object valueFromColumn;
                      | 
                      |         // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π columnIndexToFilter
                      |         // –í–∞–∂–Ω–æ: Model getValueAt –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "—Å—ã—Ä—ã–µ" –¥–∞–Ω–Ω—ã–µ (Date, Enum, etc.)
                      |         // –ú—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–≤–µ—Å—Ç–∏ –∏—Ö –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.
                      |         try {
                      |             // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ TableModel –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ/–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ
                      |             // entry.getValue(columnIndexToFilter) - —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–æ–¥–µ–ª–∏ –¥–ª—è —ç—Ç–æ–π –∫–æ–ª–æ–Ω–∫–∏
                      |             valueFromColumn = entry.getValue(columnIndexToFilter);
                      | 
                      |         } catch (IndexOutOfBoundsException e) {
                      |             System.err.println("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ –≤ ColumnRowFilter: " + columnIndexToFilter);
                      |             return false; // –ù–µ –≤–∫–ª—é—á–∞—Ç—å, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π
                      |         }
                      | 
                      | 
                      |         if (valueFromColumn == null) {
                      |             return false;
                      |         }
                      | 
                      |         // –ò—Å–ø–æ–ª—å–∑—É–µ–º Stream API, –∫–∞–∫ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å
                      |         return Stream.of(String.valueOf(valueFromColumn).toLowerCase())
                      |                 .anyMatch(fieldValue -> fieldValue.contains(searchText));
                      |     }
                      | }
                      --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (ColumnRowFilter.java) ---

                    üìÑ FilterFieldInfo.java (547 bytes)
                      --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (FilterFieldInfo.java) ---
                      | package functions.filter;
                      | 
                      | import javax.swing.*;
                      | 
                      | public class FilterFieldInfo {
                      |     final String labelKey;
                      |     final int columnIndex;
                      |     public JTextField textField;
                      | 
                      |     public FilterFieldInfo(String labelKey, int columnIndex) {
                      |         this.labelKey = labelKey;
                      |         this.columnIndex = columnIndex;
                      |     }
                      | 
                      |     public String getLabelKey() {
                      |         return labelKey;
                      |     }
                      | 
                      |     public int getColumnIndex() {
                      |         return columnIndex;
                      |     }
                      | 
                      |     public JTextField getTextField() {
                      |         return textField;
                      |     }
                      | }
                      --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (FilterFieldInfo.java) ---

            üìÇ gui/
                üìÑ HBTable.java (4569 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (HBTable.java) ---
                  | package gui;
                  | 
                  | import classes.*;
                  | import enums.*;
                  | import managers.*;
                  | import org.apache.ibatis.annotations.Delete;
                  | 
                  | import javax.swing.table.*;
                  | import java.text.*;
                  | import java.util.*;
                  | 
                  | public class HBTable extends AbstractTableModel {
                  | 
                  |     private List<HumanBeing> hbList;
                  |     private final String[] columnKeys = {
                  |             "table.column.id", "table.column.name", "table.column.coordinateX", "table.column.coordinateY",
                  |             "table.column.creationDate", "table.column.realHero", "table.column.hasToothpick",
                  |             "table.column.impactSpeed", "table.column.soundtrackName", "table.column.weaponType",
                  |             "table.column.mood", "table.column.carName", "table.column.carCool", "table.column.ownerId"
                  |     };
                  |     private final Class<?>[] columnClasses = {
                  |             Integer.class,
                  |             String.class,
                  |             Long.class,
                  |             Long.class,
                  |             Date.class,
                  |             Boolean.class,
                  |             Boolean.class,
                  |             Long.class,
                  |             String.class,
                  |             WeaponType.class,
                  |             Mood.class,
                  |             String.class,
                  |             Boolean.class,
                  |             Integer.class
                  |     };
                  | 
                  | 
                  |     public HBTable() {
                  |         this.hbList = new ArrayList<>();
                  |         if (CollectionManager.collection != null) {
                  |             this.hbList.addAll(CollectionManager.collection);
                  |         }
                  |     }
                  | 
                  |     public void updateData(List<HumanBeing> newData) {
                  |         if (newData != null) {
                  |             this.hbList = new ArrayList<>(newData);
                  |         } else {
                  |             this.hbList = new ArrayList<>();
                  |         }
                  |         fireTableDataChanged();
                  |     }
                  | 
                  |     public HumanBeing getHumanBeingAt(int rowIndex) {
                  |         if (rowIndex >= 0 && rowIndex < hbList.size()) {
                  |             return hbList.get(rowIndex);
                  |         }
                  |         return null;
                  |     }
                  | 
                  |     @Override
                  |     public int getRowCount() {
                  |         return hbList.size();
                  |     }
                  | 
                  |     @Override
                  |     public int getColumnCount() {
                  |         return columnKeys.length;
                  |     }
                  | 
                  |     @Override
                  |     public String getColumnName(int columnIndex) {
                  |         if (columnIndex < 0 || columnIndex >= columnKeys.length) {
                  |             return "";
                  |         }
                  |         return LocalisationManager.getString(columnKeys[columnIndex]);
                  |     }
                  | 
                  |     @Override
                  |     public Class<?> getColumnClass(int columnIndex) {
                  |         if (columnIndex < 0 || columnIndex >= columnClasses.length) {
                  |             return Object.class;
                  |         }
                  |         return columnClasses[columnIndex];
                  |     }
                  | 
                  |     @Override
                  |     public Object getValueAt(int rowIndex, int columnIndex) {
                  |         if (rowIndex < 0 || rowIndex >= hbList.size()) {
                  |             return null;
                  |         }
                  |         HumanBeing human = hbList.get(rowIndex);
                  |         if (human == null) return null;
                  | 
                  |         try {
                  |             switch (columnIndex) {
                  |                 case 0: return human.getId();
                  |                 case 1: return human.getName();
                  |                 case 2: return human.getCoordinates() != null ? human.getCoordinates().getX() : null;
                  |                 case 3: return human.getCoordinates() != null ? human.getCoordinates().getY() : null;
                  |                 case 4: return human.getCreationDate(); // <-- –ò–ó–ú–ï–ù–ï–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç Date
                  |                 case 5: return human.isRealHero();
                  |                 case 6: return human.isHasToothpick();
                  |                 case 7: return human.getImpactSpeed();
                  |                 case 8: return human.getSoundtrackName();
                  |                 case 9: return human.getWeaponType();   // <-- –ò–ó–ú–ï–ù–ï–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º enum WeaponType
                  |                 case 10: return human.getMood();       // <-- –ò–ó–ú–ï–ù–ï–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º enum Mood
                  |                 case 11: return human.getCar() != null ? human.getCar().getName() : LocalisationManager.getString("text.noCar");
                  |                 case 12: return human.getCar() != null ? human.getCar().isCool() : null;
                  |                 case 13: return human.getOwnerId();
                  |                 default: return null;
                  |             }
                  |         } catch (Exception e) {
                  |             System.err.println("–û—à–∏–±–∫–∞ –≤ getValueAt –¥–ª—è —Å—Ç—Ä–æ–∫–∏ " + rowIndex + ", –∫–æ–ª–æ–Ω–∫–∏ " + columnIndex + ": " + e.getMessage());
                  |             return "Error";
                  |         }
                  |     }
                  | 
                  | 
                  |     @Override
                  |     public boolean isCellEditable(int rowIndex, int columnIndex) {
                  |         return false;
                  |     }
                  | 
                  |     public void localeChanged() {
                  |         fireTableStructureChanged();
                  |     }
                  | 
                  |     public String[] getColumnHeaderKeys() {
                  |         return columnKeys;
                  |     }
                  | 
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (HBTable.java) ---

                üìÑ LoginDialog.java (8172 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (LoginDialog.java) ---
                  | package gui;
                  | 
                  | import managers.*;
                  | import run.Main;
                  | 
                  | import javax.swing.*;
                  | import java.awt.*;
                  | import java.awt.event.*;
                  | import java.beans.*;
                  | 
                  | public class LoginDialog extends JDialog implements PropertyChangeListener {
                  | 
                  |     private JTextField usernameField;
                  |     private JPasswordField passwordField;
                  |     private JButton loginButton;
                  |     private JButton registerButton;
                  |     private JComboBox<String> languageComboBox;
                  |     private JLabel usernameLabel, passwordLabel, languageLabel;
                  | 
                  |     private DBManager dbManager;
                  | 
                  |     private boolean Succeeded = false;
                  | 
                  | 
                  |     public LoginDialog(Frame parent, DBManager dbManager) {
                  |         super(parent, true);
                  |         this.dbManager = dbManager;
                  | 
                  |         LocalisationManager.addPropertyChangeListener(this);
                  | 
                  |         initComponents();
                  |         updateTexts();
                  |         pack();
                  |         setResizable(false);
                  |         setLocationRelativeTo(parent);
                  | 
                  |         setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
                  |         addWindowListener(new WindowAdapter() {
                  |             @Override
                  |             public void windowClosing(WindowEvent e) {
                  |                 System.exit(0);
                  |             }
                  |         });
                  |     }
                  | 
                  |     private void initComponents() {
                  |         setLayout(new GridBagLayout());
                  |         GridBagConstraints cs = new GridBagConstraints();
                  |         cs.fill = GridBagConstraints.HORIZONTAL;
                  |         cs.insets = new Insets(5, 5, 5, 5); // –û—Ç—Å—Ç—É–ø—ã
                  | 
                  |         usernameLabel = new JLabel();
                  |         cs.gridx = 0; cs.gridy = 0; cs.gridwidth = 1;
                  |         add(usernameLabel, cs);
                  | 
                  |         usernameField = new JTextField(20);
                  |         cs.gridx = 1; cs.gridy = 0; cs.gridwidth = 2;
                  |         add(usernameField, cs);
                  | 
                  |         passwordLabel = new JLabel();
                  |         cs.gridx = 0; cs.gridy = 1; cs.gridwidth = 1;
                  |         add(passwordLabel, cs);
                  | 
                  |         passwordField = new JPasswordField(20);
                  |         cs.gridx = 1; cs.gridy = 1; cs.gridwidth = 2;
                  |         add(passwordField, cs);
                  | 
                  |         languageLabel = new JLabel();
                  |         cs.gridx = 0; cs.gridy = 2; cs.gridwidth = 1;
                  |         add(languageLabel, cs);
                  | 
                  |         String[] languages = {
                  |                 "mainWindow.menu.language.russian",
                  |                 "mainWindow.menu.language.norwegian",
                  |                 "mainWindow.menu.language.french",
                  |                 "mainWindow.menu.language.spanish_sv"
                  |         };
                  |         // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è JComboBox
                  |         String[] displayLanguages = new String[languages.length];
                  |         for (int i = 0; i < languages.length; i++) {
                  |             displayLanguages[i] = LocalisationManager.getString(languages[i]);
                  |         }
                  | 
                  |         languageComboBox = new JComboBox<>(displayLanguages);
                  |         languageComboBox.addActionListener(e -> {
                  |             int selectedIndex = languageComboBox.getSelectedIndex();
                  |             switch (selectedIndex) {
                  |                 case 0: LocalisationManager.setLocale(LocalisationManager.RU_LOCALE); break;
                  |                 case 1: LocalisationManager.setLocale(LocalisationManager.NO_LOCALE); break;
                  |                 case 2: LocalisationManager.setLocale(LocalisationManager.FR_LOCALE); break;
                  |                 case 3: LocalisationManager.setLocale(LocalisationManager.EV_SV_LOCALE); break;
                  |             }
                  |         });
                  |         cs.gridx = 1; cs.gridy = 2; cs.gridwidth = 2;
                  |         add(languageComboBox, cs);
                  | 
                  | 
                  |         loginButton = new JButton();
                  |         loginButton.addActionListener(new ActionListener() {
                  |             public void actionPerformed(ActionEvent e) {
                  |                 performLogin();
                  |             }
                  |         });
                  | 
                  |         registerButton = new JButton();
                  |         registerButton.addActionListener(new ActionListener() {
                  |             public void actionPerformed(ActionEvent e) {
                  |                 performRegister();
                  |             }
                  |         });
                  | 
                  |         JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
                  |         buttonPanel.add(loginButton);
                  |         buttonPanel.add(registerButton);
                  | 
                  |         cs.gridx = 0; cs.gridy = 3; cs.gridwidth = 3; cs.anchor = GridBagConstraints.CENTER;
                  |         add(buttonPanel, cs);
                  |     }
                  | 
                  |     private void performLogin() {
                  |         String username = usernameField.getText().trim();
                  |         String password = new String(passwordField.getPassword());
                  | 
                  |         if (username.isEmpty() || password.isEmpty()) {
                  |             JOptionPane.showMessageDialog(this,
                  |                     LocalisationManager.getString("login.message.fieldsCannotBeEmpty"),
                  |                     LocalisationManager.getString("dialog.title.error"),
                  |                     JOptionPane.ERROR_MESSAGE);
                  |             return;
                  |         }
                  | 
                  |         boolean success = dbManager.login(username, password);
                  | 
                  |         if (success) {
                  |             Main.username = username;
                  |             Main.login = true;
                  |             Succeeded = true;
                  |             JOptionPane.showMessageDialog(this, LocalisationManager.getString("login.message.success"));
                  |             dispose();
                  |         } else {
                  |             JOptionPane.showMessageDialog(this,
                  |                     LocalisationManager.getString("login.message.failed"),
                  |                     LocalisationManager.getString("dialog.title.error"),
                  |                     JOptionPane.ERROR_MESSAGE);
                  |             passwordField.setText("");
                  |         }
                  |     }
                  | 
                  |     private void performRegister() {
                  |         String username = usernameField.getText().trim();
                  |         String password = new String(passwordField.getPassword());
                  | 
                  |         if (username.isEmpty() || password.isEmpty()) {
                  |             JOptionPane.showMessageDialog(this,
                  |                     LocalisationManager.getString("login.message.fieldsCannotBeEmpty"),
                  |                     LocalisationManager.getString("dialog.title.error"),
                  |                     JOptionPane.ERROR_MESSAGE);
                  |             return;
                  |         }
                  |         dbManager.registerUser(username, password);
                  | 
                  |         if (Main.login) {
                  |             Succeeded = true;
                  |             dispose();
                  |         } else {
                  |             JOptionPane.showMessageDialog(this,
                  |                     LocalisationManager.getString("login.message.registrationFailed") + (Main.username.equals(username) ? "" : " " + LocalisationManager.getString("login.message.userExists")),
                  |                     LocalisationManager.getString("dialog.title.error"),
                  |                     JOptionPane.ERROR_MESSAGE);
                  |             passwordField.setText("");
                  |         }
                  |     }
                  | 
                  | 
                  |     private void updateTexts() {
                  |         setTitle(LocalisationManager.getString("login.title"));
                  |         usernameLabel.setText(LocalisationManager.getString("login.label.username"));
                  |         passwordLabel.setText(LocalisationManager.getString("login.label.password"));
                  |         languageLabel.setText(LocalisationManager.getString("login.label.language"));
                  |         loginButton.setText(LocalisationManager.getString("login.button.login"));
                  |         registerButton.setText(LocalisationManager.getString("login.button.register"));
                  | 
                  |         if (languageComboBox != null) {
                  |             String[] languages = {
                  |                     "mainWindow.menu.language.russian", "mainWindow.menu.language.norwegian",
                  |                     "mainWindow.menu.language.french", "mainWindow.menu.language.spanish_sv"
                  |             };
                  |             int selectedIndex = languageComboBox.getSelectedIndex();
                  |             DefaultComboBoxModel<String> model = (DefaultComboBoxModel<String>) languageComboBox.getModel();
                  |             model.removeAllElements();
                  |             for (String langKey : languages) {
                  |                 model.addElement(LocalisationManager.getString(langKey));
                  |             }
                  |             if (selectedIndex >=0 && selectedIndex < model.getSize()) {
                  |                 languageComboBox.setSelectedIndex(selectedIndex);
                  |             }
                  |         }
                  |     }
                  | 
                  |     @Override
                  |     public void propertyChange(PropertyChangeEvent evt) {
                  |         if (LocalisationManager.LOCALE_CHANGED_PROPERTY.equals(evt.getPropertyName())) {
                  |             SwingUtilities.invokeLater(this::updateTexts);
                  |         }
                  |     }
                  | 
                  |     public boolean isSucceeded() {
                  |         return Succeeded;
                  |     }
                  | 
                  |     @Override
                  |     public void dispose() {
                  |         LocalisationManager.removePropertyChangeListener(this);
                  |         super.dispose();
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (LoginDialog.java) ---

                üìÑ MainWindow.java (28207 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (MainWindow.java) ---
                  | package gui;
                  | 
                  | import enums.*;
                  | import functions.filter.*;
                  | import gui.filter.ColumnRowFilter;
                  | import gui.renderers.*;
                  | import managers.*;
                  | import run.*;
                  | 
                  | import javax.swing.*;
                  | import javax.swing.border.*;
                  | import javax.swing.event.*;
                  | import javax.swing.table.*;
                  | import java.awt.*;
                  | import java.awt.event.*;
                  | import java.beans.*;
                  | import java.util.*;
                  | import java.util.List;
                  | import java.util.regex.PatternSyntaxException;
                  | 
                  | public class MainWindow extends JFrame implements PropertyChangeListener {
                  | 
                  |     private List<FilterFieldInfo> filterFieldsInfoList;
                  | 
                  |     private static final int DEFAULT_WIDTH = 1920;
                  |     private static final int DEFAULT_HEIGHT = 1080;
                  |     private static final Dimension PREFERRED_WINDOW_SIZE = new Dimension(DEFAULT_WIDTH, DEFAULT_HEIGHT);
                  | 
                  |     private JMenuBar menuBar;
                  | 
                  |     private JMenu fileMenu;
                  |     private JMenu languageMenu;
                  | 
                  |     private JMenuItem exitItem;
                  |     private JMenuItem ruItem;
                  |     private JMenuItem noItem;
                  |     private JMenuItem frItem;
                  |     private JMenuItem esSvItem;
                  | 
                  |     private JLabel currentUserLabel;
                  |     private JLabel filterLabel;
                  | 
                  |     private JPanel statusBar;
                  |     private JPanel tablePanel;
                  |     private JPanel visualizationPanel;
                  |     private JPanel filterPanel;
                  | 
                  |     private JSplitPane mainSplitPane;
                  | 
                  |     private HBTable hbTableModel;
                  | 
                  |     private JTable objectTable;
                  | 
                  |     private JTextField filterTextField;
                  |     private JTextField nameFilterField;
                  |     private JTextField idFilterField;
                  |     private JTextField soundtrackFilterField;
                  | 
                  |     private TableRowSorter<HBTable> sorter;
                  | 
                  | 
                  |     public MainWindow() {
                  |         LocalisationManager.addPropertyChangeListener(this);
                  |         initComponents();
                  |         updateTexts();
                  |         setPreferredSize(PREFERRED_WINDOW_SIZE);
                  |         pack();
                  |         setLocationRelativeTo(null);
                  |     }
                  | 
                  |     private void initComponents() {
                  |         setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                  |         addWindowListener(new WindowAdapter() {
                  |             @Override
                  |             public void windowClosing(WindowEvent e) {
                  |                 confirmAndExit();
                  |             }
                  |         });
                  | 
                  |         // 1. –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
                  |         menuBar = new JMenuBar();
                  |         // ... (–∫–æ–¥ –º–µ–Ω—é –∫–∞–∫ —É —Ç–µ–±—è) ...
                  |         setJMenuBar(menuBar);
                  | 
                  |         // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
                  |         tablePanel = new JPanel(new BorderLayout()); // –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞–¥ –Ω–µ–π
                  |         tablePanel.setBorder(BorderFactory.createTitledBorder(""));
                  | 
                  |         visualizationPanel = new JPanel(new BorderLayout());
                  |         visualizationPanel.setBorder(BorderFactory.createTitledBorder(""));
                  |         JLabel vizPlaceholder = new JLabel("–ú–µ—Å—Ç–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (JPanel/Canvas)", SwingConstants.CENTER);
                  |         visualizationPanel.add(vizPlaceholder, BorderLayout.CENTER);
                  | 
                  | 
                  |         // --- –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –ù–ï–°–ö–û–õ–¨–ö–ò–• –ø–æ–ª–µ–π ---
                  |         filterPanel = new JPanel(new GridBagLayout()); // –ò—Å–ø–æ–ª—å–∑—É–µ–º GridBagLayout –¥–ª—è —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏
                  |         GridBagConstraints gbc = new GridBagConstraints();
                  |         gbc.insets = new Insets(2, 2, 2, 2);
                  |         gbc.anchor = GridBagConstraints.WEST;
                  | 
                  |         DocumentListener combinedFilterListener = new DocumentListener() {
                  |             public void insertUpdate(DocumentEvent e) { applyCombinedFilter(); }
                  |             public void removeUpdate(DocumentEvent e) { applyCombinedFilter(); }
                  |             public void changedUpdate(DocumentEvent e) { applyCombinedFilter(); }
                  |         };
                  | 
                  |         // –ú–µ—Ç–∫–∞ –∏ –ø–æ–ª–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ò–º–µ–Ω–∏
                  |         // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–ª—é—á "filter.label.name" –µ—Å—Ç—å –≤ properties
                  |         gbc.gridx = 0; gbc.gridy = 0; filterPanel.add(new JLabel(LocalisationManager.getString("filter.label.name")), gbc);
                  |         gbc.gridx = 1; gbc.gridy = 0; nameFilterField = new JTextField(15); filterPanel.add(nameFilterField, gbc);
                  |         nameFilterField.getDocument().addDocumentListener(combinedFilterListener);
                  | 
                  |         // –ú–µ—Ç–∫–∞ –∏ –ø–æ–ª–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ ID
                  |         // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–ª—é—á "filter.label.id" –µ—Å—Ç—å –≤ properties
                  |         gbc.gridx = 0; gbc.gridy = 1; filterPanel.add(new JLabel(LocalisationManager.getString("filter.label.id")), gbc);
                  |         gbc.gridx = 1; gbc.gridy = 1; idFilterField = new JTextField(10); filterPanel.add(idFilterField, gbc);
                  |         idFilterField.getDocument().addDocumentListener(combinedFilterListener);
                  | 
                  |         // –ú–µ—Ç–∫–∞ –∏ –ø–æ–ª–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –°–∞—É–Ω–¥—Ç—Ä–µ–∫—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                  |         // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–ª—é—á "filter.label.soundtrack" –µ—Å—Ç—å –≤ properties
                  |         // gbc.gridx = 0; gbc.gridy = 2; filterPanel.add(new JLabel(LocalisationManager.getString("filter.label.soundtrack")), gbc);
                  |         // gbc.gridx = 1; gbc.gridy = 2; soundtrackFilterField = new JTextField(15); filterPanel.add(soundtrackFilterField, gbc);
                  |         // soundtrackFilterField.getDocument().addDocumentListener(combinedFilterListener);
                  | 
                  |         // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–∞ –í–í–ï–†–• —Ç–∞–±–ª–∏—Ü—ã
                  |         tablePanel.add(filterPanel, BorderLayout.NORTH);
                  | 
                  | 
                  |         // 3. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
                  |         hbTableModel = new HBTable();
                  |         objectTable = new JTable(hbTableModel);
                  | 
                  |         String[] columnHeaderKeys = hbTableModel.getColumnHeaderKeys(); // –ù—É–∂–µ–Ω —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥ –≤ HBTable
                  | 
                  |         filterFieldsInfoList = new ArrayList<>();
                  |         for (int i = 0; i < columnHeaderKeys.length; i++) {
                  |             // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –º–µ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–º–µ–Ω—è—è "table.column." –Ω–∞ "filter.label."
                  |             String filterLabelKey = columnHeaderKeys[i].replace("table.column.", "filter.label.");
                  |             filterFieldsInfoList.add(new FilterFieldInfo(filterLabelKey, i));
                  |         }
                  | 
                  |         /// //////////
                  |         int gridY = 0;
                  |         for (FilterFieldInfo fieldInfo : filterFieldsInfoList) {
                  |             gbc.gridx = 0;
                  |             gbc.gridy = gridY;
                  |             filterPanel.add(new JLabel(LocalisationManager.getString(fieldInfo.getLabelKey())), gbc);
                  | 
                  |             gbc.gridx = 1;
                  |             gbc.gridy = gridY;
                  |             fieldInfo.textField = new JTextField(15); // –°–æ–∑–¥–∞–µ–º JTextField –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ fieldInfo
                  |             filterPanel.add(fieldInfo.textField, gbc);
                  |             fieldInfo.textField.getDocument().addDocumentListener(combinedFilterListener);
                  |             gridY++;
                  |         }
                  |         // –ß—Ç–æ–±—ã –ø–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–ª–∞—Å—å —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ, –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–æ–∫ –º–Ω–æ–≥–æ,
                  |         // –º–æ–∂–Ω–æ –ø–æ–º–µ—Å—Ç–∏—Ç—å filterPanel –≤ JScrollPane
                  |         JScrollPane filterScrollPane = new JScrollPane(filterPanel,
                  |                 JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                  |                 JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
                  |         filterScrollPane.setBorder(null); // –£–±—Ä–∞—Ç—å —Ä–∞–º–∫—É —É —Å–∫—Ä–æ–ª–ª-–ø–∞–Ω–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞
                  | 
                  |         tablePanel.add(filterScrollPane, BorderLayout.NORTH); // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–∞ (—Å–æ —Å–∫—Ä–æ–ª–ª–æ–º)
                  | 
                  |         // 3. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
                  |         objectTable = new JTable(hbTableModel); // hbTableModel —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤—ã—à–µ
                  |         // ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: sorter, —Ä–µ–Ω–¥–µ—Ä–µ—Ä—ã, —à–∏—Ä–∏–Ω–∞, –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä—ã ...)
                  |         // ... (—ç—Ç–æ—Ç –∫–æ–¥ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω)
                  | 
                  |         JScrollPane tableScrollPane = new JScrollPane(objectTable);
                  |         tablePanel.add(tableScrollPane, BorderLayout.CENTER);
                  | 
                  | 
                  |         objectTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                  |         this.sorter = new TableRowSorter<>(hbTableModel);
                  |         objectTable.setRowSorter(this.sorter);
                  | 
                  |         // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–æ–≤
                  |         CenterRender centerRenderer = new CenterRender();
                  |         objectTable.setDefaultRenderer(Object.class, centerRenderer);
                  |         objectTable.setDefaultRenderer(String.class, centerRenderer);
                  |         objectTable.setDefaultRenderer(Integer.class, centerRenderer);
                  |         objectTable.setDefaultRenderer(Long.class, centerRenderer);
                  |         objectTable.setDefaultRenderer(Boolean.class, centerRenderer);
                  |         objectTable.setDefaultRenderer(Date.class, new DateRenderer());
                  |         objectTable.setDefaultRenderer(WeaponType.class, new EnumRenderer("enum.weaponType."));
                  |         objectTable.setDefaultRenderer(Mood.class, new EnumRenderer("enum.mood."));
                  | 
                  |         // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                  |         JTableHeader header = objectTable.getTableHeader();
                  |         // ... (–∫–æ–¥ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤) ...
                  | 
                  |         // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–æ–≤ (—ç—Ç–æ—Ç –±–ª–æ–∫ —É —Ç–µ–±—è –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º)
                  |         // ... (–∫–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è sorter) ...
                  | 
                  |         // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
                  |         TableColumnModel columnModel = objectTable.getColumnModel();
                  | 
                  |         // 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è (SplitPane)
                  |         mainSplitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, tablePanel, visualizationPanel);
                  |         mainSplitPane.setResizeWeight(0.5);
                  |         mainSplitPane.setOneTouchExpandable(true);
                  |         mainSplitPane.setContinuousLayout(true);
                  | 
                  |         // 5. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
                  |         statusBar = new JPanel(new FlowLayout(FlowLayout.LEFT));
                  |         currentUserLabel = new JLabel();
                  |         statusBar.add(currentUserLabel);
                  | 
                  |         // 6. –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
                  |         setLayout(new BorderLayout());
                  |         add(mainSplitPane, BorderLayout.CENTER);
                  |         add(statusBar, BorderLayout.SOUTH);
                  |     }
                  | 
                  | //    private void initComponents() {
                  | //        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                  | //        addWindowListener(new WindowAdapter() {
                  | //            @Override
                  | //            public void windowClosing(WindowEvent e) {
                  | //                confirmAndExit();
                  | //            }
                  | //        });
                  | //
                  | //        // 1. –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
                  | //        menuBar = new JMenuBar();
                  | //
                  | //        fileMenu = new JMenu();
                  | //        exitItem = new JMenuItem();
                  | //        exitItem.addActionListener(e -> confirmAndExit());
                  | //        fileMenu.add(exitItem);
                  | //        menuBar.add(fileMenu);
                  | //
                  | //        languageMenu = new JMenu();
                  | //        ruItem = new JMenuItem();
                  | //        ruItem.addActionListener(e -> LocalisationManager.setLocale(LocalisationManager.RU_LOCALE));
                  | //        languageMenu.add(ruItem);
                  | //        noItem = new JMenuItem();
                  | //        noItem.addActionListener(e -> LocalisationManager.setLocale(LocalisationManager.NO_LOCALE));
                  | //        languageMenu.add(noItem);
                  | //        frItem = new JMenuItem();
                  | //        frItem.addActionListener(e -> LocalisationManager.setLocale(LocalisationManager.FR_LOCALE));
                  | //        languageMenu.add(frItem);
                  | //        esSvItem = new JMenuItem();
                  | //        esSvItem.addActionListener(e -> LocalisationManager.setLocale(LocalisationManager.EV_SV_LOCALE));
                  | //        languageMenu.add(esSvItem);
                  | //        menuBar.add(languageMenu);
                  | //        setJMenuBar(menuBar); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –æ–¥–∏–Ω —Ä–∞–∑
                  | //
                  | //        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
                  | //        tablePanel = new JPanel(new BorderLayout());
                  | //        tablePanel.setBorder(BorderFactory.createTitledBorder("")); // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ updateTexts
                  | //
                  | //        // --- –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞ ---
                  | //        filterPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
                  | //        filterLabel = new JLabel(); // –¢–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤ updateTexts
                  | //        filterTextField = new JTextField(30); // –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞
                  | //        filterPanel.add(filterLabel);
                  | //        filterPanel.add(filterTextField);
                  | //        tablePanel.add(filterPanel, BorderLayout.NORTH); // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–∞ –í–í–ï–†–• —Ç–∞–±–ª–∏—Ü—ã
                  | //
                  | //        visualizationPanel = new JPanel(new BorderLayout());
                  | //        visualizationPanel.setBorder(BorderFactory.createTitledBorder("")); // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ updateTexts
                  | //        JLabel vizPlaceholder = new JLabel("–ú–µ—Å—Ç–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (JPanel/Canvas)", SwingConstants.CENTER);
                  | //        visualizationPanel.add(vizPlaceholder, BorderLayout.CENTER);
                  | //
                  | //
                  | //        // 3. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
                  | //        hbTableModel = new HBTable();
                  | //        objectTable = new JTable(hbTableModel);
                  | //
                  | //        // --- –ù–ê–°–¢–†–û–ô–ö–ò –¢–ê–ë–õ–ò–¶–´ ---
                  | //        objectTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                  | //
                  | //        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤—â–∏–∫/—Ñ–∏–ª—å—Ç—Ä–æ–≤—â–∏–∫
                  | //        this.sorter = new TableRowSorter<>(hbTableModel); // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–æ–ª—é –∫–ª–∞—Å—Å–∞
                  | //        objectTable.setRowSorter(this.sorter);
                  | //
                  | //        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —è—á–µ–µ–∫
                  | //        CenterRender centerRenderer = new CenterRender();
                  | //        objectTable.setDefaultRenderer(Object.class, centerRenderer);
                  | //        objectTable.setDefaultRenderer(String.class, centerRenderer);
                  | //        objectTable.setDefaultRenderer(Integer.class, centerRenderer);
                  | //        objectTable.setDefaultRenderer(Long.class, centerRenderer);
                  | //        objectTable.setDefaultRenderer(Boolean.class, centerRenderer);
                  | //        objectTable.setDefaultRenderer(Date.class, new DateRenderer()); // –£–±–µ–¥–∏—Å—å, —á—Ç–æ DateRenderer –µ—Å—Ç—å
                  | //        objectTable.setDefaultRenderer(WeaponType.class, new EnumRenderer("enum.weaponType.")); // –£–±–µ–¥–∏—Å—å, —á—Ç–æ EnumRenderer –µ—Å—Ç—å
                  | //        objectTable.setDefaultRenderer(Mood.class, new EnumRenderer("enum.mood."));
                  | //
                  | //        // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
                  | //        JTableHeader header = objectTable.getTableHeader();
                  | //        if (header.getDefaultRenderer() instanceof DefaultTableCellRenderer) {
                  | //            ((DefaultTableCellRenderer) header.getDefaultRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
                  | //        } else {
                  | //            DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
                  | //            headerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
                  | //            for (int i = 0; i < objectTable.getColumnModel().getColumnCount(); i++) {
                  | //                if (i < objectTable.getColumnModel().getColumnCount()) {
                  | //                    objectTable.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
                  | //                }
                  | //            }
                  | //        }
                  | //
                  | //        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤—â–∏–∫–∞
                  | //        final int MOOD_COLUMN_INDEX = 10; // –ü—Ä–æ–≤–µ—Ä—å –∏–Ω–¥–µ–∫—Å—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–≤–æ–µ–π HBTable.columnKeys
                  | //        final int WEAPON_TYPE_COLUMN_INDEX = 9;
                  | //
                  | //        if (MOOD_COLUMN_INDEX < this.sorter.getModel().getColumnCount()) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
                  | //            this.sorter.setComparator(MOOD_COLUMN_INDEX, new Comparator<Mood>() {
                  | //                @Override
                  | //                public int compare(Mood m1, Mood m2) {
                  | //                    if (m1 == null && m2 == null) return 0;
                  | //                    if (m1 == null) return -1;
                  | //                    if (m2 == null) return 1;
                  | //                    return Integer.compare(m1.getPointOfHappy(), m2.getPointOfHappy());
                  | //                }
                  | //            });
                  | //        }
                  | //
                  | //        if (WEAPON_TYPE_COLUMN_INDEX < this.sorter.getModel().getColumnCount()) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
                  | //            this.sorter.setComparator(WEAPON_TYPE_COLUMN_INDEX, new Comparator<WeaponType>() {
                  | //                @Override
                  | //                public int compare(WeaponType wt1, WeaponType wt2) {
                  | //                    if (wt1 == null && wt2 == null) return 0;
                  | //                    if (wt1 == null) return -1;
                  | //                    if (wt2 == null) return 1;
                  | //                    return Integer.compare(wt1.getDegreeOfCool(), wt2.getDegreeOfCool());
                  | //                }
                  | //            });
                  | //        }
                  | //
                  | //        DocumentListener filterListener = new DocumentListener() {
                  | //            public void insertUpdate(DocumentEvent e) { applyCombinedFilter(); }
                  | //            public void removeUpdate(DocumentEvent e) { applyCombinedFilter(); }
                  | //            public void changedUpdate(DocumentEvent e) { applyCombinedFilter(); }
                  | //        };
                  | //
                  | //
                  | //        filterPanel = new JPanel(new GridBagLayout()); // –ò–ª–∏ –¥—Ä—É–≥–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª–µ–π
                  | //        GridBagConstraints gbc = new GridBagConstraints();
                  | //        gbc.insets = new Insets(2,2,2,2);
                  | //        gbc.anchor = GridBagConstraints.WEST;
                  | //
                  | //        gbc.gridx = 0; gbc.gridy = 0; filterPanel.add(new JLabel(LocalisationManager.getString("filter.label.name")), gbc);
                  | //        gbc.gridx = 1; gbc.gridy = 0; nameFilterField = new JTextField(15); filterPanel.add(nameFilterField, gbc);
                  | //        nameFilterField.getDocument().addDocumentListener(filterListener); // –û–±—â–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å
                  | //
                  | //
                  | //        gbc.gridx = 0; gbc.gridy = 1; filterPanel.add(new JLabel(LocalisationManager.getString("filter.label.id")), gbc);
                  | //        gbc.gridx = 1; gbc.gridy = 1; idFilterField = new JTextField(10); filterPanel.add(idFilterField, gbc);
                  | //        idFilterField.getDocument().addDocumentListener(filterListener);
                  | //
                  | //
                  | //        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
                  | //        TableColumnModel columnModel = objectTable.getColumnModel();
                  | //        if (columnModel.getColumnCount() > 0) columnModel.getColumn(0).setPreferredWidth(50);
                  | //        if (columnModel.getColumnCount() > 1) columnModel.getColumn(1).setPreferredWidth(200);
                  | //        if (columnModel.getColumnCount() > 2) columnModel.getColumn(2).setPreferredWidth(80);
                  | //        if (columnModel.getColumnCount() > 3) columnModel.getColumn(3).setPreferredWidth(80);
                  | //        if (columnModel.getColumnCount() > 9) columnModel.getColumn(9).setPreferredWidth(120);
                  | //
                  | //
                  | //        JScrollPane tableScrollPane = new JScrollPane(objectTable);
                  | //        tablePanel.add(tableScrollPane, BorderLayout.CENTER); // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥ –ø–∞–Ω–µ–ª—å—é —Ñ–∏–ª—å—Ç—Ä–∞
                  | //
                  | //        // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
                  | //        filterTextField.getDocument().addDocumentListener(new DocumentListener() {
                  | //            public void insertUpdate(DocumentEvent e) { applyFilter(); }
                  | //            public void removeUpdate(DocumentEvent e) { applyFilter(); }
                  | //            public void changedUpdate(DocumentEvent e) { applyFilter(); }
                  | //        });
                  | //
                  | //        // 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è (SplitPane)
                  | //        mainSplitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, tablePanel, visualizationPanel);
                  | //        mainSplitPane.setResizeWeight(0.5);
                  | //        mainSplitPane.setOneTouchExpandable(true);
                  | //        mainSplitPane.setContinuousLayout(true);
                  | //
                  | //        // 5. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
                  | //        statusBar = new JPanel(new FlowLayout(FlowLayout.LEFT));
                  | //        currentUserLabel = new JLabel();
                  | //        statusBar.add(currentUserLabel);
                  | //
                  | //        // 6. –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
                  | //        setLayout(new BorderLayout());
                  | //        add(mainSplitPane, BorderLayout.CENTER);
                  | //        add(statusBar, BorderLayout.SOUTH);
                  | //    }
                  | 
                  |     private void confirmAndExit() {
                  |             String dialogTitle = LocalisationManager.getString("dialog.title.confirmation");
                  |             String dialogMessage = LocalisationManager.getString("dialog.confirmExit.message");
                  | 
                  |             String yesButtonText = LocalisationManager.getString("button.yes");
                  |             String noButtonText = LocalisationManager.getString("button.no");
                  | 
                  |             if (dialogTitle.startsWith("?") || dialogTitle.startsWith("!")) {
                  |                 dialogTitle = "Confirm Exit";
                  |             }
                  |             if (dialogMessage.startsWith("?") || dialogMessage.startsWith("!")) {
                  |                 dialogMessage = "Are you sure you want to exit?";
                  |             }
                  |             if (yesButtonText.startsWith("?") || yesButtonText.startsWith("!")) {
                  |                 yesButtonText = "Yes";
                  |             }
                  |             if (noButtonText.startsWith("?") || noButtonText.startsWith("!")) {
                  |                 noButtonText = "No";
                  |             }
                  | 
                  |             Object[] options = {yesButtonText, noButtonText};
                  | 
                  |             int response = JOptionPane.showOptionDialog(this,
                  |                     dialogMessage,
                  |                     dialogTitle,
                  |                     JOptionPane.YES_NO_OPTION,
                  |                     JOptionPane.QUESTION_MESSAGE,
                  |                     null,
                  |                     options,
                  |                     options[0]);
                  | 
                  |             if (response == 0) {
                  |                 disposeFrame();
                  |             }
                  |     }
                  | 
                  | 
                  |     private void updateTexts() {
                  |         setTitle(LocalisationManager.getString("mainWindow.title"));
                  | 
                  |         if (fileMenu != null) {
                  |             fileMenu.setText(LocalisationManager.getString("mainWindow.menu.file"));
                  |         }
                  |         if (exitItem != null) {
                  |             exitItem.setText(LocalisationManager.getString("mainWindow.menu.file.exit"));
                  |         }
                  |         if (languageMenu != null) {
                  |             languageMenu.setText(LocalisationManager.getString("mainWindow.menu.language"));
                  |         }
                  |         if (ruItem != null) {
                  |             ruItem.setText(LocalisationManager.getString("mainWindow.menu.language.russian"));
                  |         }
                  |         if (noItem != null) {
                  |             noItem.setText(LocalisationManager.getString("mainWindow.menu.language.norwegian"));
                  |         }
                  |         if (frItem != null) {
                  |             frItem.setText(LocalisationManager.getString("mainWindow.menu.language.french"));
                  |         }
                  |         if (esSvItem != null) {
                  |             esSvItem.setText(LocalisationManager.getString("mainWindow.menu.language.spanish_sv"));
                  |         }
                  |         if (currentUserLabel != null) {
                  |             String usernameText = (Main.username != null && !Main.username.isEmpty()) ? Main.username : "N/A";
                  |             currentUserLabel.setText(LocalisationManager.getString("mainWindow.label.currentUser") + " " + usernameText);
                  |         }
                  |         if (tablePanel != null && tablePanel.getBorder() instanceof TitledBorder) {
                  |             ((TitledBorder) tablePanel.getBorder()).setTitle(LocalisationManager.getString("mainWindow.label.table"));
                  |             tablePanel.repaint(); // –í–∞–∂–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ Border
                  |         }
                  |         if (visualizationPanel != null && visualizationPanel.getBorder() instanceof TitledBorder) {
                  |             ((TitledBorder) visualizationPanel.getBorder()).setTitle(LocalisationManager.getString("mainWindow.label.visualization"));
                  |             visualizationPanel.repaint();
                  |         }
                  |         if (hbTableModel != null) {
                  |             hbTableModel.localeChanged();
                  |         }
                  | 
                  |         if (menuBar != null) {
                  |             menuBar.revalidate();
                  |             menuBar.repaint();
                  |         }
                  |         revalidate();
                  |         repaint();
                  |     }
                  | 
                  |     @Override
                  |     public void propertyChange(PropertyChangeEvent evt) {
                  |         if (LocalisationManager.LOCALE_CHANGED_PROPERTY.equals(evt.getPropertyName())) {
                  |             SwingUtilities.invokeLater(this::updateTexts);
                  |         }
                  |     }
                  | 
                  |     private void disposeFrame() {
                  |         LocalisationManager.removePropertyChangeListener(this);
                  |         super.dispose();
                  |         System.exit(0);
                  |     }
                  | 
                  |     public HBTable getHbTableModel() {
                  |         return hbTableModel;
                  |     }
                  | 
                  | 
                  |     private void applyFilter() {
                  |         String text = filterTextField.getText();
                  |         if (sorter == null) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                  | 
                  |         if (text.trim().isEmpty()) {
                  |             sorter.setRowFilter(null);
                  |         } else {
                  |             try {
                  |                 sorter.setRowFilter(new ColumnRowFilter(text, 1, hbTableModel));
                  |             } catch (Exception e) {
                  |                 e.printStackTrace();
                  |                 sorter.setRowFilter(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
                  |             }
                  |         }
                  |     }
                  | 
                  |     private void applyCombinedFilter() {
                  |         if (sorter == null || hbTableModel == null) { // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ hbTableModel
                  |             System.err.println("Soter –∏–ª–∏ TableModel –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ applyCombinedFilter");
                  |             return;
                  |         }
                  | 
                  | //        List<ColumnRowFilter> filters = new ArrayList<>();
                  |         List<RowFilter<? super HBTable, ? super Integer>> filters = new ArrayList<>();
                  | 
                  |         String nameText = nameFilterField.getText();
                  |         if (nameText != null && !nameText.trim().isEmpty()) {
                  |             filters.add(new ColumnRowFilter(nameText, 1, hbTableModel));
                  |         }
                  | 
                  |         // –§–∏–ª—å—Ç—Ä –ø–æ –ù–∞–∑–≤–∞–Ω–∏—é —Å–∞—É–Ω–¥—Ç—Ä–µ–∫–∞ (–∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ 8)
                  |         String soundtrackText = soundtrackFilterField.getText();
                  |         if (soundtrackText != null && !soundtrackText.trim().isEmpty()) {
                  |             filters.add(new ColumnRowFilter(soundtrackText, 8, hbTableModel));
                  |         }
                  | 
                  |         // –§–∏–ª—å—Ç—Ä –ø–æ ID (–∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ 0)
                  |         String idText = idFilterField.getText();
                  |         if (idText != null && !idText.trim().isEmpty()) {
                  |             // –î–ª—è ID –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ "–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å"
                  |             // –°–µ–π—á–∞—Å ColumnSpecificRowFilter –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å ID –∫–∞–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫—É.
                  |             // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –ª–æ–≥–∏–∫—É –≤ ColumnSpecificRowFilter –¥–ª—è ID –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å
                  |             // –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π RowFilter.numberFilter.
                  |             filters.add(new ColumnRowFilter(idText, 0, hbTableModel));
                  |         }
                  | 
                  |         // –î–æ–±–∞–≤—å —Å—é–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
                  | 
                  |         if (filters.isEmpty()) {
                  |             sorter.setRowFilter(null); // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—É—Å—Ç—ã–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
                  |         } else {
                  |             try {
                  |                 // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å —É—Å–ª–æ–≤–∏–µ–º "–ò" (AND)
                  |                 // –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—Ç—å –í–°–ï–ú –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
                  |                 RowFilter<HBTable, Integer> compoundRowFilter = RowFilter.andFilter(filters);
                  |                 sorter.setRowFilter(compoundRowFilter);
                  |             } catch (PatternSyntaxException pse) {
                  |                 // –≠—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è RowFilter.regexFilter, –¥–ª—è –Ω–∞—à–µ–≥–æ RowFilter –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ
                  |                 System.err.println("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–µ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è ColumnSpecificRowFilter): " + pse.getMessage());
                  |                 sorter.setRowFilter(null); // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                  |             } catch (Exception e) {
                  |                 System.err.println("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: " + e.getMessage());
                  |                 e.printStackTrace();
                  |                 sorter.setRowFilter(null); // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞
                  |             }
                  |         }
                  |     }
                  | 
                  | 
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (MainWindow.java) ---

                üìÇ renderers/
                    üìÑ CenterRender.java (539 bytes)
                      --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (CenterRender.java) ---
                      | package gui.renderers;
                      | 
                      | import javax.swing.*;
                      | import javax.swing.table.*;
                      | import java.awt.*;
                      | 
                      | public class CenterRender extends DefaultTableCellRenderer {
                      |     public CenterRender() {
                      |         setHorizontalAlignment(SwingConstants.CENTER);
                      |     }
                      | 
                      |     @Override
                      |     public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                      |         super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                      |         return this;
                      |     }
                      | }
                      --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (CenterRender.java) ---

                    üìÑ DateRenderer.java (917 bytes)
                      --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (DateRenderer.java) ---
                      | package gui.renderers;
                      | 
                      | import managers.LocalisationManager;
                      | 
                      | import javax.swing.*;
                      | import javax.swing.table.*;
                      | import java.text.*;
                      | import java.util.*;
                      | 
                      | public class DateRenderer extends DefaultTableCellRenderer {
                      |     private DateFormat dateFormat;
                      | 
                      |     public DateRenderer() {
                      |         super();
                      |         setHorizontalAlignment(SwingConstants.CENTER);
                      |     }
                      | 
                      |     @Override
                      |     protected void setValue(Object value) {
                      |         Locale currentLocale = LocalisationManager.getLocale();
                      |         if (currentLocale == null) {
                      |             currentLocale = new Locale("ru", "RU"); // Fallback
                      |         }
                      |         dateFormat = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, currentLocale);
                      | 
                      |         if (value instanceof Date) {
                      |             setText(dateFormat.format((Date) value));
                      |         } else {
                      |             setText((value == null) ? "" : value.toString());
                      |         }
                      |     }
                      | }
                      --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (DateRenderer.java) ---

                    üìÑ EnumRenderer.java (815 bytes)
                      --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (EnumRenderer.java) ---
                      | package gui.renderers;
                      | 
                      | import managers.*;
                      | 
                      | import javax.swing.*;
                      | import javax.swing.table.*;
                      | 
                      | public class EnumRenderer extends DefaultTableCellRenderer {
                      |     private String enumKeyPrefix; // e.g., "enum.mood." or "enum.weaponType."
                      | 
                      |     public EnumRenderer(String enumKeyPrefix) {
                      |         super();
                      |         this.enumKeyPrefix = enumKeyPrefix;
                      |         setHorizontalAlignment(SwingConstants.CENTER);
                      |     }
                      | 
                      |     @Override
                      |     protected void setValue(Object value) {
                      |         if (value instanceof Enum) {
                      |             Enum<?> enumValue = (Enum<?>) value;
                      |             setText(LocalisationManager.getString(enumKeyPrefix + enumValue.name().toUpperCase()));
                      |         } else {
                      |             setText((value == null) ? LocalisationManager.getString("text.notSet") : value.toString());
                      |         }
                      |     }
                      | }
                      --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (EnumRenderer.java) ---

            üìÇ interfaces/
                üìÑ Commander.java (861 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (Commander.java) ---
                  | package interfaces;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public interface Commander {
                  |     /**
                  |      * –ë–∞–∑–æ–≤–æ–µ –≤—ã–ø–æ–ª–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
                  |      * @param args
                  |      */
                  |     void execute (String args);
                  |     /**
                  |      * –ë–∞–∑–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                  |      */
                  |     void execute ();
                  | //    /**
                  | //     * –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º –∏/–∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                  | //     */
                  | //    void execute (String args, Scanner sc);
                  | //    /**
                  | //     *
                  | //     * –ö–æ–º–∞–Ω–¥—ã –±–µ–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —Å–æ –≤–≤–æ–¥–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å
                  | //     */
                  | //    void execute (Scanner sc);
                  |     /**
                  |      * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
                  |      */
                  |     void description();
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (Commander.java) ---

            üìÇ managers/
                üìÑ CollectionManager.java (8565 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (CollectionManager.java) ---
                  | package managers;
                  | 
                  | import classes.HumanBeing;
                  | import enums.Mood;
                  | import exceptions.NullStringException;
                  | import functions.comparators.MoodComparator;
                  | import functions.comparators.SoundtrackNameComparator;
                  | import utils.JsonParser;
                  | import utils.ScriptFileReader;
                  | 
                  | import java.time.LocalDateTime;
                  | import java.time.format.DateTimeFormatter;
                  | import java.util.ArrayList;
                  | import java.util.Collections;
                  | 
                  | public class CollectionManager{
                  | 
                  |     /**
                  |      * @author Dimasavr
                  |      */
                  | 
                  |     LocalDateTime initialazed;
                  |     DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd:MM:yyyy HH:mm:ss");
                  |     String timeOfCreation;
                  |     DBManager db;
                  | 
                  |     public static ArrayList<HumanBeing> collection;
                  | 
                  |     public CollectionManager(DBManager db) {
                  |         this.db = db;;
                  | //        initialazed = LocalDateTime.now();
                  | //        timeOfCreation = initialazed.format(formatter);
                  | //        db = new DBManager();
                  | ////        collection = new ArrayList<>();
                  | //        collection = db.getCollection();
                  |     }
                  | 
                  |     public void startCM () {
                  |         initialazed = LocalDateTime.now();
                  |         timeOfCreation = LocalDateTime.now().format(formatter);
                  |         collection = db.getCollection();
                  |     }
                  | 
                  |     /**
                  |      * –í—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                  |      */
                  |     public void info(){
                  |         String s = "–¢–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏: " + collection.getClass() + ", –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: " + timeOfCreation + ", –†–∞–∑–º–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏: " + collection.size();
                  |         System.out.println(s);
                  |     }
                  | 
                  |     /**
                  |      * –î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
                  |      * @param hb
                  |      */
                  |     public void add(HumanBeing hb){
                  |         collection.add(hb);
                  |     }
                  | 
                  |     /**
                  |      * –£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º id
                  |      * @param id
                  |      * @param hb
                  |      */
                  |     public void updateID(int id, HumanBeing hb){
                  |         int num = 0;
                  |         for (HumanBeing humanBeing : collection) {
                  |             if (humanBeing.getId() == id) {
                  |                 break;
                  |             }
                  |             num++;
                  |         }
                  |         collection.set(num, hb);
                  |     }
                  | 
                  |     /**
                  |      * –£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º id
                  |      * @param id
                  |      */
                  |     public void removeById(int id){
                  | 
                  |         int num = 0;
                  |         for (HumanBeing humanBeing : collection) {
                  |             if (humanBeing.getId() == id) {
                  |                 break;
                  |             }
                  |             num++;
                  |         }
                  | 
                  |         collection.remove(num);
                  |     }
                  | 
                  |     /**
                  |      * –û—á–∏—â–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é
                  |      */
                  |     public void clear(){
                  |         collection.clear();
                  |     }
                  | 
                  |     /**
                  |      * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ —Ñ–∞–π–ª
                  |      * @param way
                  |      */
                  |     public void saveToFile(String way){
                  |         JsonParser.collectionToJson(way, collection);
                  |         System.out.println("–ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ " + way);
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ –ø—É—Ç—ë–º
                  |      */
                  |     public void executeScriptFromFilename(String filename){
                  |         ScriptFileReader sfl = new ScriptFileReader();
                  |         sfl.readFile(filename);
                  |     }
                  | 
                  |     /**
                  |      * –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                  |      */
                  |     public void exit(){
                  |         System.exit(0);
                  |     }
                  | 
                  |     /**
                  |      * –£–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                  |      */
                  |     public void removeFirst(){
                  | //        collection.removeFirst();
                  |         collection.remove(0);
                  |     }
                  | 
                  |     /**
                  |      * –î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –º–µ–Ω—å—à–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                  |      * @param hb
                  |      */
                  |     public void addIfMin(HumanBeing hb){
                  |         if (hb.compareTo(findMin()) < 0){
                  |             add(hb);
                  |         }
                  |     }
                  | 
                  |     /**
                  |      * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
                  |      */
                  |     public void sort(){
                  |         Collections.sort(collection);
                  |     }
                  | 
                  |     /**
                  |      * –£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ–ª—è mood
                  |      * @param mood
                  |      */
                  |     public void removeAnyByMood (Mood mood){
                  |         ArrayList<HumanBeing> toRemove = new ArrayList<>();
                  |         for (HumanBeing hb : collection){
                  |             if (hb.getMood() == mood){
                  |                 toRemove.add(hb);
                  |             }
                  |         }
                  |         int index = 0;
                  |         collection.remove(toRemove.get(index));
                  |     }
                  | 
                  |     /**
                  |      * –í—ã–≤–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ–ª—è soundtrackName
                  |      */
                  |     public void minBySoundtrackName(){
                  |         SoundtrackNameComparator snc = new SoundtrackNameComparator();
                  |         ArrayList<HumanBeing> sortedC = collection;
                  |         Collections.sort(sortedC, snc);
                  | //        System.out.println(sortedC.getFirst());
                  |         System.out.println(sortedC.get(0));
                  |     }
                  | 
                  |     /**
                  |      * –í—ã–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª–µ mood, –∫–æ—Ç–æ—Ä–æ–µ –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ
                  |      * @param mood
                  |      * @return int
                  |      */
                  |     public int countGreaterThanMood(Mood mood){
                  |         MoodComparator mc = new MoodComparator();
                  |         ArrayList<HumanBeing> sortedC = collection;
                  |         Collections.sort(sortedC, mc);
                  |         int count = 0;
                  |         for (HumanBeing hb : sortedC){
                  |             count++;
                  |             if (hb.getMood().getPointOfHappy() > mood.getPointOfHappy()){
                  |                 break;
                  |             }
                  |         }
                  |         return collection.size() - count;
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞, —Ö—Ä–∞–Ω—è—â–µ–≥–æ—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
                  |      */
                  |     public void readEnv(){
                  |         try {
                  |             String way = System.getenv("FILE_NAME");
                  |             if (way == null || way.isEmpty()) {
                  |                 throw new NullStringException();
                  |             }
                  | 
                  |             ArrayList<HumanBeing> startCollection = collection;
                  |             ArrayList<HumanBeing> endCollection = JsonParser.jsonToCollection(way);
                  | 
                  |             startCollection.addAll(endCollection);
                  | 
                  |             collection = startCollection;
                  | 
                  |             System.out.println("–ö–æ–ª–ª–µ–∫—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
                  | 
                  |         } catch (NullStringException e) {
                  |             System.out.println("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—á–∏—Ç–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—ã, —Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –¥—Ä—É–≥–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏");
                  |         }
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
                  |      * @param fileName
                  |      */
                  |     public void readJson(String fileName){
                  | 
                  |         ArrayList<HumanBeing> startCollection = collection;
                  |         ArrayList<HumanBeing> endCollection = JsonParser.jsonToCollection(fileName);
                  | 
                  |         startCollection.addAll(endCollection);
                  | 
                  |         collection = startCollection;
                  |     }
                  | 
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é
                  |      * @return collection
                  |      */
                  |     public ArrayList<HumanBeing> getCollection() {
                  |         return collection;
                  |     }
                  | 
                  |     /**
                  |      * –∏—â–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                  |      * @return HumanBeing
                  |      */
                  |     public HumanBeing findMin(){
                  |         HumanBeing result = null;
                  |         int count = 0;
                  |         for (HumanBeing humanBeing : collection) {
                  |             for (HumanBeing humanBeing2 : collection) {
                  |                 if (humanBeing.compareTo(humanBeing2) > 0) {
                  |                     count++;
                  |                 }
                  |             }
                  |             if (count == 0){
                  |                 result = humanBeing;
                  |                 break;
                  |             }
                  |         }
                  |         return result;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                  |      * @return
                  |      */
                  |     public LocalDateTime getInitialazed() {
                  |         return initialazed;
                  |     }
                  | 
                  |     /**
                  |      * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                  |      * @param initialazed
                  |      */
                  |     public void setInitialazed(LocalDateTime initialazed) {
                  |         this.initialazed = initialazed;
                  |     }
                  | 
                  |     /**
                  |      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                  |      * @return
                  |      */
                  |     public String getTimeOfCreation() {
                  |         return timeOfCreation;
                  |     }
                  | 
                  |     /**
                  |      * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                  |      * @param timeOfCreation
                  |      */
                  |     public void setTimeOfCreation(String timeOfCreation) {
                  |         this.timeOfCreation = timeOfCreation;
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (CollectionManager.java) ---

                üìÑ ConsoleManager.java (2425 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (ConsoleManager.java) ---
                  | package managers;
                  | 
                  | import commands.Command;
                  | import exceptions.IncorrectArgsNumber;
                  | import functions.Invoker;
                  | import run.Main;
                  | 
                  | import java.nio.file.AccessDeniedException;
                  | import java.rmi.AccessException;
                  | import java.util.NoSuchElementException;
                  | import java.util.Scanner;
                  | 
                  | public class ConsoleManager {
                  | 
                  |     CollectionManager cm;
                  |     Invoker inv;
                  |     Scanner sc;
                  | 
                  |     public ConsoleManager() {
                  |         this.cm = Main.cm;
                  |         this.inv = Main.inv;
                  |         this.sc = Main.sc;
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–≤–æ–¥ —Å –∫–æ–Ω—Å–æ–ª–∏
                  |      */
                  | 
                  |     public void startConsole() {
                  | 
                  | //        sc = new Scanner(System.in);
                  | 
                  |         while (true) {
                  |             try {
                  | 
                  |                 if (!sc.hasNextLine()) {
                  |                     break;
                  |                 }
                  | 
                  |                 String line = sc.nextLine().trim();
                  | //                String[] tokens = line.split(" ");
                  |                 String[] tokens = line.split("\\s+");
                  | 
                  |                 String commandString = tokens[0].toLowerCase();
                  | 
                  | //                boolean login = Main.login;
                  | //                boolean isLoginOrRegCommand = commandString.equals("login") || commandString.equals("reg");
                  | //
                  | //                if (!login && !isLoginOrRegCommand) {
                  | //                    System.out.println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å (–∫–æ–º–∞–Ω–¥—ã: login, reg)");
                  | //                    continue;
                  | //                }
                  | 
                  |                 Command command = inv.commands.get(commandString);
                  | 
                  |                 String args = "";
                  |                 if (tokens.length == 2) {
                  |                     args = tokens[1];
                  |                 } else if (tokens.length > 2) {
                  |                     args = tokens[2];
                  |                 }
                  |                 command.execute(args);
                  |             } catch (NullPointerException e){
                  |                 System.out.println("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é");
                  |             } catch (IncorrectArgsNumber e){
                  |                 System.out.println(e.getMessage());
                  |                 System.out.println("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
                  |             } catch (NoSuchElementException e) {
                  | 
                  |             } catch (AccessDeniedException e) {
                  |                 throw new RuntimeException(e);
                  |             } catch (AccessException e) {
                  |                 throw new RuntimeException(e);
                  |             }
                  |         }
                  | 
                  |     }
                  | 
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (ConsoleManager.java) ---

                üìÑ DBManager.java (29833 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (DBManager.java) ---
                  | package managers;
                  | 
                  | import classes.Car;
                  | import classes.Coordinates;
                  | import classes.HumanBeing;
                  | import classes.User;
                  | import enums.Mood;
                  | import enums.WeaponType;
                  | import org.apache.ibatis.jdbc.ScriptRunner;
                  | import run.Main;
                  | 
                  | import java.io.FileReader;
                  | import java.io.IOException;
                  | import java.nio.charset.StandardCharsets;
                  | import java.security.MessageDigest;
                  | import java.security.NoSuchAlgorithmException;
                  | import java.sql.*;
                  | import java.util.ArrayList;
                  | import java.util.HashMap;
                  | 
                  | public class DBManager {
                  | 
                  |     CollectionManager cm = Main.cm;
                  | 
                  |     private static Connection conn;
                  |     private static ResultSet rs;
                  |     private static ScriptRunner runner;
                  | 
                  |     public void connect() {
                  |         try {
                  |             this.conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/studs", "s467055", System.getenv("PASSWD"));
                  |             this.runner = new ScriptRunner(this.conn);
                  |             setScriptRunnerConfig();
                  | 
                  |         } catch (SQLException e) {
                  |             e.printStackTrace();
                  |         }
                  |     }
                  | 
                  |     public void create() {
                  |         try {
                  |             FileReader fr = new FileReader("src/main/resources/sql/create.sql", StandardCharsets.UTF_8);
                  |             runner.runScript(fr);
                  |         } catch (IOException e) {
                  |             e.printStackTrace();
                  |         }
                  |     }
                  | 
                  |     public ArrayList<HumanBeing> getCollection() {
                  |         ArrayList<HumanBeing> hb = new ArrayList<>();
                  | 
                  |         try (PreparedStatement ps = conn.prepareStatement(
                  |                 "SELECT " +
                  |                         "hb.id, " +
                  |                         "hb.name, " +
                  |                         "coord.x, " +
                  |                         "coord.y, " +
                  |                         "hb.creation_date, " +
                  |                         "hb.real_hero, " +
                  |                         "hb.has_toothpick, " +
                  |                         "hb.impact_speed, " +
                  |                         "hb.soundtrack_name, " +
                  |                         "hb.weapon_type, " +
                  |                         "hb.mood, " +
                  |                         "car.name_car, " +
                  |                         "car.cool, " +
                  |                         "col.owner_id " +
                  |                         "FROM hb " +
                  |                         "JOIN cars car on car.id_car = hb.car_id " +
                  |                         "JOIN coords coord on coord.id_coord = hb.coords_id " +
                  |                         "JOIN collection col on hb.id = col.element_id"
                  |         );
                  |              ResultSet rs = ps.executeQuery()) {
                  | 
                  |             while (rs.next()) {
                  |                 Integer id = rs.getInt("id");
                  |                 String name = rs.getString("name");
                  |                 Long x = rs.getLong("x");
                  |                 Long y = rs.getLong("y");
                  |                 java.util.Date date = rs.getDate("creation_date");
                  |                 Boolean realHero = rs.getBoolean("real_hero");
                  |                 Boolean hasToothpick = rs.getBoolean("has_toothpick");
                  |                 Long impactSpeed = rs.getLong("impact_speed");
                  |                 String soundtrackName = rs.getString("soundtrack_name");
                  |                 WeaponType weaponType = WeaponType.valueOf(rs.getString("weapon_type"));
                  |                 String moodString = rs.getString("mood");
                  |                 Mood mood = (moodString != null && !moodString.trim().isEmpty()) ? Mood.valueOf(moodString) : null;
                  | 
                  |                 String nameCar = rs.getString("name_car");
                  |                 Boolean cool = rs.getBoolean("cool");
                  | 
                  |                 Integer owner_id = rs.getInt("owner_id");
                  | 
                  |                 HumanBeing being = new HumanBeing(
                  |                         id,
                  |                         name,
                  |                         new Coordinates(x, y),
                  |                         date,
                  |                         realHero,
                  |                         hasToothpick,
                  |                         impactSpeed,
                  |                         soundtrackName,
                  |                         weaponType,
                  |                         mood,
                  |                         new Car(nameCar, cool),
                  |                         owner_id
                  |                 );
                  |                 hb.add(being);
                  |             }
                  |         } catch (SQLException e) {
                  |             e.printStackTrace();
                  |         } catch (IllegalArgumentException e) {
                  |             e.printStackTrace();
                  |         }
                  |         return hb;
                  |     }
                  | 
                  |     public HashMap<Integer, User> getUsers() {
                  |         HashMap<Integer, User> users = new HashMap<>();
                  |         try {
                  |             Statement s = conn.createStatement();
                  |             rs = s.executeQuery("SELECT * FROM users");
                  |             while (rs.next()) {
                  |                 Integer uID = rs.getInt("user_id");
                  |                 String uName = rs.getString("login");
                  |                 String uPassword = rs.getString("password");
                  |                 User user = new User(uName, uPassword);
                  |                 users.put(uID, user);
                  |             }
                  |         } catch (SQLException e) {
                  |             e.printStackTrace();
                  |         }
                  |         return users;
                  |     }
                  | 
                  |     public void registerUser(String username, String password) {
                  |         try {
                  |             conn.setAutoCommit(false);
                  | 
                  |             boolean flag = false;
                  |             for (User user : getUsers().values()) {
                  |                 if (username.equals(user.getLogin())) {
                  |                     flag = true;
                  |                     System.out.println("–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
                  |                 }
                  |             }
                  |             if (!flag) {
                  |                 PreparedStatement ps = conn.prepareStatement("INSERT INTO users (login, password) VALUES (?, ?)");
                  |                 ps.setString(1, username);
                  |                 ps.setString(2, hashSmth(password));
                  |                 int rows = ps.executeUpdate();
                  | 
                  |                 if (rows > 0) {
                  |                     conn.commit();
                  |                     System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + username + " —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.");
                  |                 }
                  |                 Main.login = true;
                  |                 Main.toBreak = false;
                  | 
                  | //            PreparedStatement ps = conn.prepareStatement("INSERT INTO users (login, password) VALUES (?, ?)");
                  | //            ps.setString(1, username);
                  | //            ps.setString(2, hashSmth(password));
                  | //            ps.executeQuery();
                  |             }
                  | 
                  |         } catch (SQLException e) {
                  |             e.printStackTrace();
                  |         } finally {
                  |             try {
                  |                 conn.setAutoCommit(true);
                  |             } catch (SQLException e) {
                  |                 e.printStackTrace();
                  |             }
                  |         }
                  |     }
                  | 
                  |     public boolean login(String username, String password) {
                  |         boolean result = false;
                  |         try {
                  |             conn.setAutoCommit(false);
                  | 
                  |             PreparedStatement ps = conn.prepareStatement("SELECT password FROM users WHERE login = ?");
                  |             ps.setString(1, username);
                  |             rs = ps.executeQuery();
                  |             String ourHash = hashSmth(password);
                  |             boolean uFound = false;
                  |             while (rs.next()) {
                  |                 uFound = true;
                  |                 String sHash = rs.getString("password");
                  |                 result = ourHash.equals(sHash);
                  |             }
                  | 
                  |             if (!uFound || !result) {
                  |                 System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
                  |                 result = false;
                  |             } else {
                  |                 System.out.println("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!");
                  |             }
                  | 
                  |         } catch (SQLException e) {
                  |             e.printStackTrace();
                  |         } finally {
                  |             try {
                  |                 conn.setAutoCommit(true);
                  |             } catch (SQLException e) {
                  |                 e.printStackTrace();
                  |             }
                  |         }
                  |         return result;
                  |     }
                  | 
                  | public boolean add(HumanBeing hb, String username) {
                  |     boolean success = false;
                  |     int ownerId = findUserIDbyUsername(username);
                  | 
                  |     if (ownerId <= 0) {
                  |         System.err.println("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '" + username + "' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID.");
                  |         return false;
                  |     }
                  | 
                  |     hb.setOwnerId(ownerId);
                  | 
                  |     try {
                  |         conn.setAutoCommit(false);
                  | 
                  |         int coordId = -1;
                  |         try (PreparedStatement psCoords = conn.prepareStatement("INSERT INTO coords (x, y) VALUES (?, ?) RETURNING id_coord", Statement.RETURN_GENERATED_KEYS)) {
                  |             psCoords.setLong(1, hb.getCoordinates().getX());
                  |             psCoords.setLong(2, hb.getCoordinates().getY());
                  |             int affectedRows = psCoords.executeUpdate();
                  |             if (affectedRows == 0) {
                  |                 throw new SQLException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –Ω–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç–∞.");
                  |             }
                  |             try (ResultSet generatedKeys = psCoords.getGeneratedKeys()) {
                  |                 if (generatedKeys.next()) {
                  |                     coordId = generatedKeys.getInt(1);
                  |                 }
                  |             }
                  |         }
                  | 
                  |         int carId = -1;
                  |         try (PreparedStatement psCars = conn.prepareStatement("INSERT INTO cars (name_car, cool) VALUES (?, ?) RETURNING id_car", Statement.RETURN_GENERATED_KEYS)) {
                  |             psCars.setString(1, hb.getCar().getName());
                  |             psCars.setBoolean(2, hb.getCar().isCool());
                  |             int affectedRows = psCars.executeUpdate();
                  |             if (affectedRows == 0) {
                  |                 throw new SQLException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã, –Ω–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç–∞.");
                  |             }
                  |             try (ResultSet generatedKeys = psCars.getGeneratedKeys()) {
                  |                 if (generatedKeys.next()) {
                  |                     carId = generatedKeys.getInt(1);
                  |                 } else {
                  |                     throw new SQLException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã, –Ω–µ –ø–æ–ª—É—á–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID.");
                  |                 }
                  |             }
                  |         }
                  | 
                  |         int humanBeingId = -1;
                  |         try (PreparedStatement psHB = conn.prepareStatement("INSERT INTO hb (name, coords_id, creation_date, real_hero, has_toothpick, impact_speed, soundtrack_name, weapon_type, mood, car_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id", Statement.RETURN_GENERATED_KEYS)) {
                  |             psHB.setString(1, hb.getName());
                  |             psHB.setInt(2, coordId);
                  |             psHB.setDate(3, new java.sql.Date(System.currentTimeMillis()));
                  |             psHB.setBoolean(4, hb.isRealHero());
                  |             psHB.setBoolean(5, hb.isHasToothpick());
                  |             psHB.setLong(6, hb.getImpactSpeed());
                  |             psHB.setString(7, hb.getSoundtrackName());
                  |             psHB.setString(8, hb.getWeaponType().name());
                  |             psHB.setString(9, hb.getMood() != null ? hb.getMood().name() : null);
                  |             psHB.setInt(10, carId);
                  | 
                  |             int affectedRows = psHB.executeUpdate();
                  |             if (affectedRows == 0) {
                  |                 throw new SQLException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ HumanBeing");
                  |             }
                  |             try (ResultSet generatedKeys = psHB.getGeneratedKeys()) {
                  |                 if (generatedKeys.next()) {
                  |                     humanBeingId = generatedKeys.getInt(1);
                  |                 } else {
                  |                     throw new SQLException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ HumanBeing, –Ω–µ –ø–æ–ª—É—á–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID.");
                  |                 }
                  |             }
                  |         }
                  | 
                  |         try (PreparedStatement psCollection = conn.prepareStatement(
                  |                 "INSERT INTO collection (element_id, owner_id) VALUES (?, ?)")) {
                  |             psCollection.setInt(1, humanBeingId);
                  |             psCollection.setInt(2, ownerId);
                  |             psCollection.executeUpdate();
                  |         }
                  | 
                  |         conn.commit();
                  |         success = true;
                  |     } catch (SQLException e) {
                  |         try {
                  |             if (conn != null) {
                  |                 conn.rollback();
                  |             }
                  |         } catch (SQLException ex) {
                  |             ex.printStackTrace();
                  |         }
                  |         e.printStackTrace();
                  |     } finally {
                  |         try {
                  |             if (conn != null) {
                  |                 conn.setAutoCommit(true);
                  |             }
                  |         } catch (SQLException e) {
                  |             System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ autoCommit:");
                  |             e.printStackTrace();
                  |         }
                  |     }
                  |     return success;
                  | }
                  | 
                  |     public boolean updateID(int id, HumanBeing hb, String username) { // –ü—Ä–∏–Ω–∏–º–∞–µ–º int id
                  |         boolean success = false;
                  |         int ownerId = findUserIDbyUsername(username); // –ù–∞—Ö–æ–¥–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                  |         if (ownerId <= 0) {
                  |             System.err.println("–û—à–∏–±–∫–∞ updateID: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '" + username + "' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID.");
                  |             return false;
                  |         }
                  | 
                  |         try {
                  |             conn.setAutoCommit(false); // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                  | 
                  |             // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º id —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é,
                  |             //    –∏ –ø–æ–ª—É—á–∞–µ–º IDs —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –º–∞—à–∏–Ω—ã.
                  |             int existingCoordsId = -1;
                  |             int existingCarId = -1;
                  | 
                  |             try (PreparedStatement psCheckAndGetIds = conn.prepareStatement("SELECT hb.coords_id, hb.car_id FROM hb JOIN collection ON hb.id = collection.element_id WHERE hb.id = ? AND collection.owner_id = ?")) {
                  |                 psCheckAndGetIds.setInt(1, id);
                  |                 psCheckAndGetIds.setInt(2, ownerId);
                  |                 try (ResultSet rsCheck = psCheckAndGetIds.executeQuery()) {
                  |                     if (!rsCheck.next()) {
                  |                         System.err.println("–û—à–∏–±–∫–∞ updateID: –≠–ª–µ–º–µ–Ω—Ç —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '" + username + "'.");
                  |                         try {
                  |                             if (conn != null) conn.rollback();
                  |                         } catch (SQLException ex) {
                  |                             ex.printStackTrace();
                  |                         }
                  |                         return false;
                  |                     }
                  |                     existingCoordsId = rsCheck.getInt("coords_id");
                  |                     existingCarId = rsCheck.getInt("car_id");
                  |                 }
                  |             }
                  |             try (PreparedStatement psUCoord = conn.prepareStatement("UPDATE coords SET x = ?, y = ? WHERE id_coord = ?")) {
                  |                 psUCoord.setLong(1, hb.getCoordinates().getX());
                  |                 psUCoord.setLong(2, hb.getCoordinates().getY());
                  |                 psUCoord.setInt(3, existingCoordsId);
                  |                 int affectedRows = psUCoord.executeUpdate();
                  |                 if (affectedRows == 0) {
                  |                     throw new SQLException("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (id_coord: " + existingCoordsId + ") –Ω–µ —É–¥–∞–ª–æ—Å—å");
                  |                 }
                  |             }
                  | 
                  |             try (PreparedStatement psUCar = conn.prepareStatement("UPDATE cars SET name_car = ?, cool = ? WHERE id_car = ?")) {
                  |                 psUCar.setString(1, hb.getCar().getName());
                  |                 psUCar.setBoolean(2, hb.getCar().isCool());
                  |                 psUCar.setInt(3, existingCarId);
                  |                 int affectedRows = psUCar.executeUpdate();
                  |                 if (affectedRows == 0) {
                  |                     throw new SQLException("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã (id_car: " + existingCarId + ") –Ω–µ —É–¥–∞–ª–æ—Å—å");
                  |                 }
                  |             }
                  | 
                  |             try (PreparedStatement psE = conn.prepareStatement(
                  |                     "UPDATE hb SET name = ? , real_hero = ?, has_toothpick = ?, impact_speed = ?, soundtrack_name = ?, weapon_type = ?, mood = ? WHERE id = ?")) { // –£–±—Ä–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ coords_id –∏ car_id —Ç.–∫. –æ–Ω–∏ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è, –º–µ–Ω—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∏–º
                  |                 psE.setString(1, hb.getName());
                  |                 // psE.setDate(2, new java.sql.Date(hb.getCreationDate().getTime()));
                  |                 psE.setBoolean(2, hb.isRealHero());
                  |                 psE.setBoolean(3, hb.isHasToothpick());
                  |                 psE.setLong(4, hb.getImpactSpeed());
                  |                 psE.setString(5, hb.getSoundtrackName());
                  |                 psE.setString(6, hb.getWeaponType().name());
                  |                 psE.setString(7, hb.getMood() != null ? hb.getMood().name() : null);
                  |                 psE.setInt(8, id);
                  | 
                  |                 int affectedRows = psE.executeUpdate();
                  |                 if (affectedRows == 0) {
                  |                     // –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è, –Ω–æ –¥–æ UPDATE hb
                  |                     throw new SQLException("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HumanBeing (id: " + id + ") –Ω–µ —É–¥–∞–ª–æ—Å—å");
                  |                 }
                  |             }
                  | 
                  |             conn.commit();
                  |             success = true;
                  |             System.out.println("–≠–ª–µ–º–µ–Ω—Ç —Å ID " + id + " —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.");
                  | 
                  |         } catch (SQLException e) {
                  |             try {
                  |                 if (conn != null) {
                  |                     conn.rollback();
                  |                 }
                  |             } catch (SQLException ex) {
                  |                 System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ updateID:");
                  |                 ex.printStackTrace();
                  |             }
                  |             System.err.println("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ updateID:");
                  |             e.printStackTrace();
                  |         } finally {
                  |             try {
                  |                 if (conn != null) {
                  |                     conn.setAutoCommit(true);
                  |                 }
                  |             } catch (SQLException e) {
                  |                 e.printStackTrace();
                  |             }
                  |         }
                  |         return success;
                  |     }
                  | 
                  |     public boolean removeByID(String username, int id) {
                  |         boolean success = false;
                  |         int ownerId = findUserIDbyUsername(username);
                  |         if (ownerId <= 0) {
                  |             System.err.println("–û—à–∏–±–∫–∞ removeByID: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '" + username + "' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID.");
                  |             return false;
                  |         }
                  | 
                  |         try {
                  |             conn.setAutoCommit(false);
                  | 
                  |             boolean elementOwned = false;
                  |             try (PreparedStatement psCO = conn.prepareStatement(
                  |                     "SELECT 1 FROM collection WHERE element_id = ? AND owner_id = ?")) {
                  |                 psCO.setInt(1, id);
                  |                 psCO.setInt(2, ownerId);
                  |                 try (ResultSet rsCheck = psCO.executeQuery()) {
                  |                     if (rsCheck.next()) {
                  |                         elementOwned = true;
                  |                     }
                  |                 }
                  |             }
                  | 
                  |             if (!elementOwned) {
                  |                 System.err.println("–û—à–∏–±–∫–∞ removeByID: –≠–ª–µ–º–µ–Ω—Ç —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '" + username + "'.");
                  |                 try {
                  |                     if (conn != null) {
                  |                         conn.rollback();
                  |                     }
                  |                 } catch (SQLException ex) {
                  |                     ex.printStackTrace();
                  |                 }
                  |                 return false;
                  |             }
                  | 
                  |             try (PreparedStatement psDBID = conn.prepareStatement("DELETE FROM hb WHERE id = ?")) {
                  |                 psDBID.setInt(1, id);
                  |                 int affectedRows = psDBID.executeUpdate();
                  | 
                  |                 if (affectedRows > 0) {
                  |                     conn.commit();
                  |                     success = true;
                  |                     System.out.println("–≠–ª–µ–º–µ–Ω—Ç —Å ID " + id + " —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.");
                  |                 }
                  |             }
                  | 
                  |         } catch (SQLException e) {
                  |             try {
                  |                 if (conn != null) {
                  |                     conn.rollback();
                  |                 }
                  |             } catch (SQLException ex) {
                  |                 ex.printStackTrace();
                  |             }
                  |             e.printStackTrace();
                  |         } finally {
                  |             try {
                  |                 if (conn != null) {
                  |                     conn.setAutoCommit(true);
                  |                 }
                  |             } catch (SQLException e) {
                  |                 e.printStackTrace();
                  |             }
                  |         }
                  |         return success;
                  |     }
                  | 
                  |     public boolean clear(String username) {
                  |         boolean success = false;
                  |         int ownerId = findUserIDbyUsername(username);
                  |         if (ownerId <= 0) {
                  |             System.err.println("–û—à–∏–±–∫–∞ clear: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '" + username + "' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID.");
                  |             return false;
                  |         }
                  | 
                  |         try {
                  |             conn.setAutoCommit(false);
                  | 
                  |             try (PreparedStatement psClearCollection = conn.prepareStatement(
                  |                     "DELETE FROM collection WHERE owner_id = ?")) {
                  |                 psClearCollection.setInt(1, ownerId);
                  |                 int affectedRows = psClearCollection.executeUpdate();
                  | 
                  |                 conn.commit();
                  |                 success = true;
                  |                 System.out.println("–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '" + username + "' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã (" + affectedRows + " —ç–ª–µ–º–µ–Ω—Ç–æ–≤).");
                  |             }
                  | 
                  |         } catch (SQLException e) {
                  |             try {
                  |                 if (conn != null) {
                  |                     conn.rollback();
                  |                 }
                  |             } catch (SQLException ex) {
                  |                 ex.printStackTrace();
                  |             }
                  |             e.printStackTrace();
                  |         } finally {
                  |             try {
                  |                 if (conn != null) {
                  |                     conn.setAutoCommit(true);
                  |                 }
                  |             } catch (SQLException e) {
                  |                 e.printStackTrace();
                  |             }
                  |         }
                  |         return success;
                  |     }
                  | 
                  |     public int findUserIDbyUsername(String username) {
                  |         int id = 0;
                  |         try {
                  |             conn.setAutoCommit(false);
                  |             PreparedStatement ps = conn.prepareStatement("SELECT user_id FROM users WHERE login = ?");
                  |             ps.setString(1, username);
                  |             rs = ps.executeQuery();
                  |             while (rs.next()) {
                  |                 id = rs.getInt("user_id");
                  |             }
                  |         } catch (SQLException e) {
                  |             e.printStackTrace();
                  |         } finally {
                  |             try {
                  |                 conn.setAutoCommit(true);
                  |             } catch (SQLException e) {
                  |                 e.printStackTrace();
                  |             }
                  |         }
                  |         return id;
                  |     }
                  | 
                  |     public boolean removeFirst(String username) {
                  |         boolean success = false;
                  |         int ownerId = findUserIDbyUsername(username); // –ù–∞—Ö–æ–¥–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                  |         if (ownerId <= 0) {
                  |             System.err.println("–û—à–∏–±–∫–∞ removeFirst: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '" + username + "' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID.");
                  |             return false; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
                  |         }
                  | 
                  |         try {
                  |             conn.setAutoCommit(false);
                  | 
                  |             int elementIdToRemove = -1;
                  |             try (PreparedStatement psFindMinOwned = conn.prepareStatement("SELECT hb.id FROM hb JOIN collection ON hb.id = collection.element_id WHERE collection.owner_id = ? ORDER BY hb.id ASC LIMIT 1")) {
                  |                 psFindMinOwned.setInt(1, ownerId);
                  | 
                  |                 try (ResultSet rsMinOwned = psFindMinOwned.executeQuery()) {
                  |                     if (!rsMinOwned.next()) {
                  |                         System.out.println("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '" + username + "' –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
                  |                         try {
                  |                             if (conn != null) conn.rollback();
                  |                         } catch (SQLException ex) {
                  |                             ex.printStackTrace();
                  |                         }
                  |                         return false;
                  |                     }
                  |                     elementIdToRemove = rsMinOwned.getInt(1);
                  |                 }
                  |             }
                  | 
                  |             try (PreparedStatement psDeleteHB = conn.prepareStatement("DELETE FROM hb WHERE id = ?")) {
                  |                 psDeleteHB.setInt(1, elementIdToRemove);
                  |                 int affectedRows = psDeleteHB.executeUpdate();
                  | 
                  |                 if (affectedRows > 0) {
                  |                     conn.commit();
                  |                     success = true;
                  | //                    System.out.println("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '" + username + "' (ID: " + elementIdToRemove + ") —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.");
                  |                 } else {
                  |                     System.err.println("–û—à–∏–±–∫–∞ removeFirst: –≠–ª–µ–º–µ–Ω—Ç —Å ID " + elementIdToRemove + " –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç?).");
                  |                     try {
                  |                         if (conn != null) conn.rollback();
                  |                     } catch (SQLException ex) {
                  |                         ex.printStackTrace();
                  |                     }
                  |                 }
                  |             }
                  |         } catch (SQLException e) {
                  |             try {
                  |                 if (conn != null) {
                  |                     conn.rollback();
                  |                 }
                  |             } catch (SQLException ex) {
                  |                 ex.printStackTrace();
                  |             }
                  |             e.printStackTrace(); // –ü–µ—á–∞—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω–æ–π –æ—à–∏–±–∫–µ
                  |         } finally {
                  |             try {
                  |                 if (conn != null) {
                  |                     conn.setAutoCommit(true);
                  |                 }
                  |             } catch (SQLException e) {
                  |                 e.printStackTrace();
                  |             }
                  |         }
                  |         return success;
                  |     }
                  | 
                  |     public boolean removeAnyByMood (String username, String moodString) {
                  |         boolean success = false;
                  |         int ownerId = findUserIDbyUsername(username);
                  |         if (ownerId <= 0) {
                  |             System.err.println("–û—à–∏–±–∫–∞ removeAnyByMood: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '" + username + "' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID.");
                  |             return false;
                  |         }
                  | 
                  |         String upperMoodString = moodString.toUpperCase();
                  |         try {
                  |             Mood.valueOf(upperMoodString);
                  |         } catch (IllegalArgumentException e) {
                  |             System.err.println("–û—à–∏–±–∫–∞ removeAnyByMood: –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: " + moodString);
                  |             return false;
                  |         }
                  | 
                  |         try {
                  |             conn.setAutoCommit(false);
                  | 
                  |             int elementIdToRemove = -1;
                  |             try(PreparedStatement psFind = conn.prepareStatement("SELECT hb.id FROM hb JOIN collection ON hb.id = collection.element_id WHERE collection.owner_id = ? AND hb.mood = ? ORDER BY hb.id ASC LIMIT 1")) {
                  |                 psFind.setInt(1, ownerId);
                  |                 psFind.setString(2, upperMoodString);
                  |                 try(ResultSet rsFind = psFind.executeQuery()) {
                  |                     if (!rsFind.next()) {
                  |                         System.out.println("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '" + username + "' –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º " + moodString + " –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
                  |                         try {
                  |                             if (conn != null) conn.rollback();
                  |                         } catch (SQLException ex) {
                  |                             ex.printStackTrace();
                  |                         }
                  |                         return false;
                  |                     }
                  |                     elementIdToRemove = rsFind.getInt(1);
                  |                 }
                  |             }
                  | 
                  |             if (elementIdToRemove != -1) {
                  |                 try(PreparedStatement psDeleteHB = conn.prepareStatement("DELETE FROM hb WHERE id = ?")) {
                  |                     psDeleteHB.setInt(1, elementIdToRemove);
                  |                     int affectedRows = psDeleteHB.executeUpdate();
                  |                     if (affectedRows > 0) {
                  |                         conn.commit();
                  |                         success = true;
                  |                         System.out.println("–û–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '" + username + "' —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º " + moodString + " (ID: " + elementIdToRemove + ") —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.");
                  |                     }
                  |                 }
                  |             }
                  | 
                  |         } catch (SQLException e) {
                  |             try {
                  |                 if (conn != null) conn.rollback();
                  |             } catch (SQLException ex) {
                  |                 ex.printStackTrace();
                  |             }
                  |             e.printStackTrace();
                  |         } finally {
                  |             try {
                  |                 if (conn != null) conn.setAutoCommit(true);
                  |             } catch (SQLException e) {
                  |                 e.printStackTrace();
                  |             }
                  |         }
                  |         return success;
                  |     }
                  | 
                  |     public int findOwnerIDByElementID (int id) {
                  |         int ownerID = 0;
                  |         try {
                  |             try (PreparedStatement ps = conn.prepareStatement("SELECT collection.owner_id FROM collection WHERE element_id = ?")) {
                  |                 ps.setInt(1, id);
                  |                 try (ResultSet rs = ps.executeQuery()) {
                  |                     if (rs.next()) {
                  |                         ownerID = rs.getInt("owner_id");
                  |                     }
                  |                 }
                  |             }
                  |         } catch (SQLException e) {
                  |             e.printStackTrace();
                  |         }
                  |         return ownerID;
                  |     }
                  | 
                  |     public String hashSmth (String string) {
                  |         StringBuilder hashPassword = new StringBuilder();
                  |         try {
                  |             MessageDigest md = MessageDigest.getInstance("SHA-1");
                  | 
                  |             byte[] pass = string.getBytes(StandardCharsets.UTF_8);
                  |             byte[] digest = md.digest(pass);
                  |             for (byte b : digest) {
                  |                 String hex = String.format("%02x", b & 0xff);
                  |                 hashPassword.append(hex);
                  |             }
                  |         } catch (NoSuchAlgorithmException e) {
                  |             e.printStackTrace();
                  |         }
                  |         return hashPassword.toString();
                  |     }
                  | 
                  |     private void setScriptRunnerConfig() {
                  |         runner.setStopOnError(true);
                  |         runner.setAutoCommit(false);
                  |         runner.setLogWriter(null);
                  |         runner.setSendFullScript(false);
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (DBManager.java) ---

                üìÑ LocalisationManager.java (3484 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (LocalisationManager.java) ---
                  | package managers;
                  | 
                  | import java.beans.*;
                  | import java.util.*;
                  | 
                  | public class LocalisationManager {
                  |     private static Locale locale;
                  |     private static ResourceBundle rb;
                  |     public static final String DEFAULT_LANGUAGE = "ru";
                  |     public static final String LOCALE_CHANGED_PROPERTY = "changed";
                  | 
                  |     public static final PropertyChangeSupport pcs = new PropertyChangeSupport(LocalisationManager.class);
                  | 
                  | 
                  |     public static final Locale RU_LOCALE = new Locale("ru", "RU");
                  |     public static final Locale NO_LOCALE = new Locale("no", "NO");
                  |     public static final Locale FR_LOCALE = new Locale("fr", "FR");
                  |     public static final Locale EV_SV_LOCALE = new Locale("es", "SV");
                  | 
                  | 
                  |     static {
                  |         setLocale(RU_LOCALE);
                  |     }
                  | 
                  |     public static String getString(String key) {
                  |         if (rb == null) {
                  |             System.err.println("ResourceBundle (rb) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ö–ª—é—á: " + key);
                  |             return "!" + key + "!"; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á, —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ –ø—Ä–æ–±–ª–µ–º—É
                  |         }
                  |         try {
                  |             return rb.getString(key);
                  |         } catch (MissingResourceException e) {
                  |             System.err.println("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ResourceBundle –¥–ª—è –ª–æ–∫–∞–ª–∏ " + locale + ": " + key);
                  |             return "?" + key + "?";
                  |         } catch (Exception e) {
                  |             e.printStackTrace();
                  |             return "!" + key + "!";
                  |         }
                  |     }
                  | 
                  |     public static void addPropertyChangeListener(PropertyChangeListener listener) {
                  |         pcs.addPropertyChangeListener(listener);
                  |     }
                  | 
                  |     public static void removePropertyChangeListener(PropertyChangeListener listener) {
                  |         pcs.removePropertyChangeListener(listener);
                  |     }
                  | 
                  | 
                  |     public static Locale getLocale() {
                  |         return locale;
                  |     }
                  | 
                  |     public static void setLocale(Locale newLocale) {
                  |         Locale oldLocale = locale;
                  |         locale = newLocale;
                  |         try {
                  |             rb = ResourceBundle.getBundle("messages", locale, LocalisationManager.class.getClassLoader());
                  |             pcs.firePropertyChange(LOCALE_CHANGED_PROPERTY, oldLocale, locale);
                  |         } catch (Exception e) {
                  |             System.err.println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ResourceBundle –¥–ª—è –ª–æ–∫–∞–ª–∏ " + newLocale + ": " + e.getMessage()); // –î–æ–±–∞–≤–∏–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                  |             if (oldLocale != null && rb == null) {
                  |                 locale = oldLocale;
                  |                 rb = ResourceBundle.getBundle("messages", locale, LocalisationManager.class.getClassLoader());
                  |                 System.err.println("–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ " + locale);
                  |             } else if (rb == null) {
                  |                 try {
                  |                     System.err.println("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å RU_LOCALE –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...");
                  |                     rb = ResourceBundle.getBundle("messages", RU_LOCALE, LocalisationManager.class.getClassLoader());
                  |                     locale = RU_LOCALE;
                  |                     pcs.firePropertyChange(LOCALE_CHANGED_PROPERTY, oldLocale, locale);
                  |                     System.err.println("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è " + locale);
                  |                 } catch (Exception ex) {
                  |                     System.err.println("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ResourceBundle –¥–∞–∂–µ –¥–ª—è RU_LOCALE: " + ex.getMessage());
                  |                 }
                  |             }
                  |         }
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (LocalisationManager.java) ---

                üìÑ LoginManager.java (1715 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (LoginManager.java) ---
                  | package managers;
                  | 
                  | import run.Main;
                  | 
                  | import java.util.Scanner;
                  | 
                  | public class LoginManager {
                  | 
                  |     CollectionManager cm;
                  |     Scanner sc;
                  |     DBManager db;
                  | 
                  |     public LoginManager() {
                  |         this.cm = Main.cm;
                  |         this.sc = Main.sc;
                  |         this.db = Main.db;
                  |     }
                  | 
                  |     public void startAuth() {
                  |         while (!Main.login) {
                  |             try {
                  |                 if (!sc.hasNextLine()) {
                  |                     break;
                  |                 }
                  |                 String line = sc.nextLine().trim();
                  |                 String[] parts = line.split("\\s+");
                  |                 String commandStr = parts[0].toLowerCase();
                  |                 if (commandStr.equals("login") && parts.length == 3) {
                  |                     Main.login = db.login(parts[1], parts[2]);
                  |                     if (Main.login) {
                  |                         Main.username = parts[1];
                  |                     } else {
                  | //                        System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
                  |                     }
                  |                 } else if (commandStr.equals("register") && parts.length == 3) {
                  |                     db.registerUser(parts[1], parts[2]);
                  |                     if (Main.login) {
                  |                         Main.username = parts[1];
                  |                     }
                  |                     if (Main.toBreak) {
                  |                         Main.toBreak = false;
                  |                         break;
                  |                     }
                  |                 } else if (parts.length != 3) {
                  |                     System.out.println("–ù–µ—Ç –ª–æ–≥–∏–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—è –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–≤–µ—Ä–Ω–∞");
                  |                 }
                  |             } catch (Exception e) {
                  |                 e.printStackTrace();
                  |             }
                  |         }
                  |     }
                  | 
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (LoginManager.java) ---

            üìÇ run/
                üìÑ Main.java (4171 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (Main.java) ---
                  | package run;
                  | 
                  | import functions.*;
                  | import managers.*;
                  | import utils.*;
                  | import gui.*;
                  | 
                  | import javax.swing.*;
                  | import java.util.*;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class Main {
                  | 
                  |     public static DBManager db = new DBManager();
                  | 
                  |     public static CollectionManager cm = new CollectionManager(db);
                  | 
                  |     public static Invoker inv = new Invoker();
                  | 
                  |     public static Scanner sc = new Scanner(System.in);
                  | 
                  | //    public static DBManager db = new DBManager();
                  | 
                  |     public static boolean login = false;
                  |     public static boolean toBreak = false;
                  | 
                  |     public static String username = "";
                  | 
                  |     public static void main(String[] args) {
                  | 
                  |         try {
                  |             UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                  |         } catch (Exception e) {
                  |             e.printStackTrace();
                  |         }
                  | 
                  |         JSCh jsc = new JSCh();
                  |         try {
                  |             System.out.println("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SSH...");
                  |             jsc.connectSSH();
                  |             System.out.println("SSH –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...");
                  |             db.connect();
                  |             System.out.println("–ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.");
                  |         } catch (Exception e) {
                  |             e.printStackTrace();
                  |             JOptionPane.showMessageDialog(null,
                  |                     "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏–ª–∏ SSH:\n" + e.getMessage() +
                  |                             "\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ.",
                  |                     "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", JOptionPane.ERROR_MESSAGE);
                  |             System.exit(1);
                  |             return;
                  |         }
                  | 
                  |         LoginDialog loginDialog = new LoginDialog(null, db); // –ü–µ—Ä–µ–¥–∞–µ–º db
                  |         loginDialog.setVisible(true);
                  | 
                  |         if (loginDialog.isSucceeded() && Main.login) {
                  |             try {
                  |                 cm.startCM();
                  |                 System.out.println("–ö–æ–ª–ª–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + Main.username);
                  |             } catch (Exception e) {
                  |                 e.printStackTrace();
                  |                 JOptionPane.showMessageDialog(null,
                  |                         "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏:\n" + e.getMessage(),
                  |                         "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", JOptionPane.ERROR_MESSAGE);
                  |             }
                  | 
                  |             SwingUtilities.invokeLater(() -> {
                  |                 MainWindow mainWindow = new MainWindow();
                  |                 mainWindow.setVisible(true);
                  |             });
                  |         } else {
                  |             System.out.println("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ.");
                  |             try {
                  |                 jsc.disconnectSSH();
                  |             } catch (Exception e) {
                  |                 e.printStackTrace();
                  |             }
                  |             System.exit(0);
                  |         }
                  | 
                  | 
                  | //        JSCh jsc = new JSCh();
                  | //        try {
                  | //            jsc.connectSSH();
                  | //            db.connect();
                  | //            cm.startCM();
                  | //        } catch (Exception e) {
                  | //            e.printStackTrace();
                  | //        }
                  | //
                  | //        System.out.println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å : –≤–≤–µ–¥–∏—Ç–µ –∏–ª–∏ register <–∏–º—è> <–ø–∞—Ä–æ–ª—å> –∏–ª–∏ login <–∏–º—è> <–ø–∞—Ä–æ–ª—å>");
                  | //        LoginManager lm = new LoginManager();
                  | //        lm.startAuth();
                  | //
                  | //        System.out.println("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –º–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã!");
                  | //        System.out.println("–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ help");
                  | //        System.out.println("–ê –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ–≤–µ—Ç—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à Ctrl+C/D (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã)");
                  | //        System.out.println("–ñ–µ–ª–∞—é —É–¥–∞—á–∏!");
                  | //
                  | //        ConsoleManager consM = new ConsoleManager();
                  | //        consM.startConsole();
                  | //
                  | //        System.out.println("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...");
                  | //        try {
                  | //            jsc.disconnectSSH();
                  | //        } catch (Exception e) {
                  | //            e.printStackTrace();
                  | //        }
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (Main.java) ---

            üìÇ utils/
                üìÑ BuildersOfElement.java (6637 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (BuildersOfElement.java) ---
                  | package utils;
                  | 
                  | import classes.Car;
                  | import classes.Coordinates;
                  | import classes.HumanBeing;
                  | import enums.Mood;
                  | import enums.WeaponType;
                  | 
                  | import java.util.Scanner;
                  | 
                  | public class BuildersOfElement {
                  |     public HumanBeing createNoAdd(boolean yourInput, Scanner scanner, String line) {
                  | 
                  |         if (yourInput) {
                  |                 Scanner sc = new Scanner(System.in);
                  |                 String name = InputFieldBuilder.build(sc, String.class)
                  |                         .start("–ù–∞—á–∞—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏")
                  |                         .inputParams("–∏–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null")
                  |                         .againMsg("–ü–µ—Ä–µ–≤–≤–µ–¥–∏—Ç–µ –∏–º—è")
                  |                         .againMsgParams("–∏–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                  |                         .end("–ó–∞–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                  |                         .build();
                  | 
                  |                 Long x = InputFieldBuilder.build(sc, Long.class)
                  |                         .start("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É x")
                  |                         .inputParams("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                  |                         .againMsg("–ü–µ—Ä–µ–≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                  |                         .againMsgParams("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω")
                  |                         .end("x –∑–∞–¥–∞–ª–∏, –∏–¥—ë–º –¥–∞–ª—å—à–µ")
                  |                         .build();
                  |                 Long y = InputFieldBuilder.build(sc, Long.class)
                  |                         .start("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É y")
                  |                         .inputParams("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                  |                         .againMsg("–ü–µ—Ä–µ–≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                  |                         .againMsgParams("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω")
                  |                         .end("y –∑–∞–¥–∞–ª–∏, –∏–¥—ë–º –¥–∞–ª—å—à–µ")
                  |                         .build();
                  | 
                  |                 Coordinates c = new Coordinates(x, y);
                  | 
                  |                 Boolean rh = InputFieldBuilder.build(sc, Boolean.class)
                  |                         .start("–í–≤–µ–¥–∏—Ç–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≥–µ—Ä–æ–µ–º")
                  |                         .inputParams("true –µ—Å–ª–∏ –ø—Ä–∞–≤–¥–∞ –∏ false –µ—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–¥–∞")
                  |                         .againMsg("–ü–µ—Ä–µ–≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
                  |                         .againMsgParams("")
                  |                         .end("–£–∑–Ω–∞–ª–∏, –ø—Ä–æ –≥–µ—Ä–æ–∏–∑–º, –∏–¥—ë–º –¥–∞–ª—å—à–µ")
                  |                         .build();
                  |                 Boolean tp = InputFieldBuilder.build(sc, Boolean.class)
                  |                         .start("–í–≤–µ–¥–∏—Ç–µ –µ—Å—Ç—å –ª–∏ —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑—É–±–Ω–∞—è –±–æ–ª—å")
                  |                         .inputParams("true –µ—Å–ª–∏ –ø—Ä–∞–≤–¥–∞ –∏ false –µ—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–¥–∞")
                  |                         .againMsg("–ü–µ—Ä–µ–≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
                  |                         .againMsgParams("")
                  |                         .end("–£–∑–Ω–∞–ª–∏ –ø—Ä–æ –∑—É–±–Ω—É—é –±–æ–ª—å, –∏–¥—ë–º –¥–∞–ª—å—à–µ")
                  |                         .build();
                  |                 Long is = InputFieldBuilder.build(sc, Long.class)
                  |                         .start("–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å —É–¥–∞—Ä–∞")
                  |                         .inputParams("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                  |                         .againMsg("–ü–µ—Ä–µ–≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                  |                         .againMsgParams("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω")
                  |                         .end("–°–∫–æ—Ä–æ—Å—Ç—å —É–¥–∞—Ä–∞ —É–∑–Ω–∞–ª–∏, –∏–¥—ë–º –¥–∞–ª—å—à–µ")
                  |                         .build();
                  |                 String sName = InputFieldBuilder.build(sc, String.class)
                  |                         .start("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞—É–Ω–¥—Ç—Ä–µ–∫–∞")
                  |                         .inputParams("–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null")
                  |                         .againMsg("–ü–µ—Ä–µ–≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                  |                         .againMsgParams("")
                  |                         .end("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞—É–Ω–¥—Ç—Ä–µ–∫–∞ —É–∑–Ω–∞–ª–∏, –∏–¥—ë–º –¥–∞–ª—å—à–µ")
                  |                         .build();
                  |                 WeaponType wt = InputFieldBuilder.build(sc, WeaponType.class)
                  |                         .start("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –æ—Ä—É–∂–∏—è")
                  |                         .inputParams("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: " + WeaponType.getV())
                  |                         .againMsg("–ü–µ—Ä–µ–≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                  |                         .againMsgParams("")
                  |                         .end("–¢–∏–ø –æ—Ä—É–∂–∏—è –∑–∞–¥–∞–Ω")
                  |                         .build();
                  |                 Mood m = InputFieldBuilder.build(sc, Mood.class)
                  |                         .start("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
                  |                         .inputParams("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: " + Mood.getV())
                  |                         .againMsg("–ü–µ—Ä–µ–≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                  |                         .againMsgParams("")
                  |                         .end("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–æ")
                  |                         .build();
                  | 
                  |                 String nameCar = InputFieldBuilder.build(sc, String.class)
                  |                         .start("–ù–∞—á–∞—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –º–∞—à–∏–Ω—ã")
                  |                         .inputParams("–∏–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null")
                  |                         .againMsg("–ü–µ—Ä–µ–≤–≤–µ–¥–∏—Ç–µ –∏–º—è")
                  |                         .againMsgParams("–∏–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                  |                         .end("–ó–∞–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                  |                         .build();
                  |                 Boolean cool = InputFieldBuilder.build(sc, Boolean.class)
                  |                         .start("–í–≤–µ–¥–∏—Ç–µ –∫—Ä—É—Ç–∞ –ª–∏ –º–∞—à–∏–Ω–∞")
                  |                         .inputParams("true –µ—Å–ª–∏ –ø—Ä–∞–≤–¥–∞ –∏ false –µ—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–¥–∞")
                  |                         .againMsg("–ü–µ—Ä–µ–≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
                  |                         .againMsgParams("")
                  |                         .end("–£–∑–Ω–∞–ª–∏ –ø—Ä–æ –∫—Ä—É—Ç–æ—Å—Ç—å, –∏–¥—ë–º –¥–∞–ª—å—à–µ")
                  |                         .build();
                  | 
                  |                 Car car = new Car(nameCar, cool);
                  | 
                  |                 System.out.println("–ó–∞–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
                  | 
                  | 
                  |                 HumanBeing hb = new HumanBeing(name, c, rh, tp, is, sName, wt, m, car);
                  | 
                  |                 return hb;
                  | 
                  |         } else {
                  |             DocumentFieldBuilder dfb = new DocumentFieldBuilder();
                  |             HumanBeing hb = dfb.build(scanner, line);
                  |             return hb;
                  |         }
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (BuildersOfElement.java) ---

                üìÑ DocumentFieldBuilder.java (4343 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (DocumentFieldBuilder.java) ---
                  | package utils;
                  | 
                  | import classes.Car;
                  | import classes.Coordinates;
                  | import classes.HumanBeing;
                  | import enums.Mood;
                  | import enums.WeaponType;
                  | import exceptions.NullStringException;
                  | 
                  | import java.util.Scanner;
                  | 
                  | public class DocumentFieldBuilder {
                  | 
                  |     /**
                  |      * –û–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Å—Ç—Ä–æ—á–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
                  |      * name
                  |      * coordinates.x
                  |      * coordinates.y
                  |      * realHero
                  |      * hasToothpick
                  |      * impactSpeed
                  |      * soundtrackName
                  |      * weaponType
                  |      * mood
                  |      * car.name
                  |      * car.cool
                  |      * @param sc
                  |      * @return HumanBeing
                  |      */
                  | 
                  |     public HumanBeing build(Scanner sc, String inputLine) {
                  |         String[] tokens = inputLine.trim().split("\\s+");
                  |         if (tokens.length != 12) {
                  |             throw new IllegalArgumentException("–û–∂–∏–¥–∞–µ—Ç—Å—è 11 –ø–æ–ª–µ–π, –ø–æ–ª—É—á–µ–Ω–æ " + tokens.length);
                  |         }
                  | 
                  |         String[] tokens2 = new String[tokens.length - 1];
                  |         System.arraycopy(tokens, 1, tokens2, 0, tokens2.length);
                  | 
                  |         HumanBeing human = new HumanBeing();
                  | 
                  |         if (tokens2[0].trim().isEmpty()) {
                  |             throw new NullStringException();
                  |         }
                  |         human.setName(tokens2[0]);
                  | 
                  |         Coordinates coordinates = new Coordinates();
                  |         if (tokens2[1].trim().isEmpty()) {
                  |             throw new NullStringException();
                  |         }
                  |         try {
                  |             long x = Long.parseLong(tokens[1]);
                  |             coordinates.setX(x);
                  |         } catch (NumberFormatException e) {
                  |             throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è coordinates.x");
                  |         }
                  |         if (tokens2[2].trim().isEmpty()) {
                  |             throw new NullStringException();
                  |         }
                  |         try {
                  |             long y = Long.parseLong(tokens2[2]);
                  |             coordinates.setY(y);
                  |         } catch (NumberFormatException e) {
                  |             throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è coordinates.y");
                  |         }
                  |         human.setCoordinates(coordinates);
                  | 
                  |         if (tokens2[3].trim().isEmpty()) {
                  |             throw new NullStringException();
                  |         }
                  |         if (!tokens2[3].equalsIgnoreCase("true") && !tokens2[3].equalsIgnoreCase("false")) {
                  |             throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è realHero");
                  |         }
                  |         human.setRealHero(Boolean.parseBoolean(tokens2[3]));
                  | 
                  |         if (tokens2[4].trim().isEmpty()) {
                  |             throw new NullStringException();
                  |         }
                  |         if (!tokens2[4].equalsIgnoreCase("true") && !tokens2[4].equalsIgnoreCase("false")) {
                  |             throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è hasToothpick");
                  |         }
                  |         human.setHasToothpick(Boolean.parseBoolean(tokens2[4]));
                  | 
                  |         if (tokens2[5].trim().isEmpty() || tokens2[5].equalsIgnoreCase("null")) {
                  |             human.setImpactSpeed(null);
                  |         } else {
                  |             try {
                  |                 Long impactSpeed = Long.parseLong(tokens2[5]);
                  |                 human.setImpactSpeed(impactSpeed);
                  |             } catch (NumberFormatException e) {
                  |                 throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è impactSpeed");
                  |             }
                  |         }
                  | 
                  |         if (tokens2[6].trim().isEmpty()) {
                  |             throw new NullStringException();
                  |         }
                  |         human.setSoundtrackName(tokens2[6]);
                  | 
                  |         if (tokens2[7].trim().isEmpty()) {
                  |             throw new NullStringException();
                  |         }
                  |         human.setWeaponType(WeaponType.valueOf(tokens2[7]));
                  | 
                  |         if (tokens2[8].trim().isEmpty() || tokens2[8].equalsIgnoreCase("null")) {
                  |             human.setMood(null);
                  |         } else {
                  |             human.setMood(Mood.valueOf(tokens2[8]));
                  |         }
                  | 
                  |         Car car = new Car();
                  |         if (tokens2[9].trim().isEmpty()) {
                  |             throw new NullStringException();
                  |         }
                  |         car.setName(tokens2[9]);
                  |         if (tokens2[10].trim().isEmpty()) {
                  |             throw new NullStringException();
                  |         }
                  |         if (!tokens2[10].equalsIgnoreCase("true") && !tokens2[10].equalsIgnoreCase("false")) {
                  |             throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è car.cool");
                  |         }
                  |         car.setCool(Boolean.parseBoolean(tokens2[10]));
                  |         human.setCar(car);
                  | 
                  |         return human;
                  |     }
                  | 
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (DocumentFieldBuilder.java) ---

                üìÑ InputFieldBuilder.java (2877 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (InputFieldBuilder.java) ---
                  | package utils;
                  | 
                  | import exceptions.NullStringException;
                  | import functions.TypeOfClassMap;
                  | 
                  | import java.util.Scanner;
                  | import java.util.function.Function;
                  | 
                  | public class InputFieldBuilder<T> {
                  |     private Scanner sc;
                  |     private Class<T> type;
                  |     private String start;
                  |     private String inputParams;
                  |     private String againMsg;
                  |     private String againMsgParams;
                  |     private String end;
                  | 
                  | 
                  | 
                  |     private InputFieldBuilder(Scanner sc, Class<T> type) {
                  |         this.sc = sc;
                  |         this.type = type;
                  |     }
                  | 
                  |     public static <T> InputFieldBuilder<T> build(Scanner sc, Class<T> type) {
                  |         return new InputFieldBuilder<T>(sc, type);
                  |     }
                  | 
                  |     public InputFieldBuilder<T> start(String start) {
                  |         this.start = start;
                  |         return this;
                  |     }
                  | 
                  |     public InputFieldBuilder<T> inputParams(String inputParams) {
                  |         this.inputParams = inputParams;
                  |         return this;
                  |     }
                  | 
                  |     public InputFieldBuilder<T> againMsg(String againMsg) {
                  |         this.againMsg = againMsg;
                  |         return this;
                  |     }
                  |     public InputFieldBuilder<T> againMsgParams(String againMsgParams) {
                  |         this.againMsgParams = againMsgParams;
                  |         return this;
                  |     }
                  | 
                  |     public InputFieldBuilder<T> end(String end) {
                  |         this.end = end;
                  |         return this;
                  |     }
                  | 
                  |     public T build() {
                  |         while (true) {
                  |             System.out.println(start);
                  |             System.out.println(inputParams);
                  |             String input;
                  | 
                  |             if (type.equals(String.class)) {
                  |                 input = sc.nextLine();
                  |             } else {
                  |                 input = sc.next();
                  |                 if (sc.hasNextLine()) {
                  |                     sc.nextLine();
                  |                 }
                  |             }
                  | 
                  |             try {
                  | 
                  |                 if (input.isEmpty() || input.trim().isEmpty()) {
                  |                     throw new NullStringException();
                  |                 }
                  | 
                  |                 Function<String, ?> parser = TypeOfClassMap.classMap.get(type);
                  |                 if (parser == null) {
                  |                     throw new UnsupportedOperationException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –¥–ª—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø–æ–ø—Ä–∞–≤—å—Ç–µ –∫–ª–∞—Å—Å InputFieldBuilder" + type);
                  |                 }
                  |                 T result = type.cast(parser.apply(input));
                  |                 System.out.println(end);
                  |                 return result;
                  | 
                  |             } catch (UnsupportedOperationException eee) {
                  |                 System.out.println(eee.getMessage());
                  |             } catch (NumberFormatException eee) {
                  |                 System.out.println(againMsgParams);
                  |             } catch (NullStringException eee) {
                  |                 System.out.println(eee.getMessage());
                  |                 System.out.println(againMsg);
                  |             } catch (IllegalArgumentException eee) {
                  |                 System.out.println(againMsg);
                  |             }
                  |         }
                  |     }
                  | 
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (InputFieldBuilder.java) ---

                üìÑ JSCh.java (1151 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (JSCh.java) ---
                  | package utils;
                  | 
                  | import com.jcraft.jsch.JSch;
                  | import com.jcraft.jsch.Session;
                  | 
                  | public class JSCh {
                  |     private Session session;
                  | 
                  |     public void connectSSH() throws Exception {
                  | 
                  |         String sshHost = "helios.cs.ifmo.ru";
                  |         String sshUser = "s467055";
                  |         int sshPort = 2222;
                  |         int localPort = 5432;
                  |         String remoteHost = "localhost";
                  |         int remotePort = 5432;
                  | 
                  |         JSch jsch = new JSch();
                  |         session = jsch.getSession(sshUser, sshHost, sshPort);
                  |         session.setPassword(System.getenv("PASS"));
                  | 
                  |         java.util.Properties config = new java.util.Properties();
                  |         config.put("StrictHostKeyChecking", "no");
                  |         session.setConfig(config);
                  | 
                  |         session.connect();
                  |         session.setPortForwardingL(localPort, remoteHost, remotePort);
                  | 
                  |         System.out.println("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ!");
                  |     }
                  | 
                  |     public void disconnectSSH() {
                  |         if (session != null && session.isConnected()) {
                  |             session.disconnect();
                  |             System.out.println("–í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î...");
                  |         }
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (JSCh.java) ---

                üìÑ JsonParser.java (2217 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (JsonParser.java) ---
                  | package utils;
                  | 
                  | import classes.HumanBeing;
                  | import com.fasterxml.jackson.databind.ObjectMapper;
                  | import com.fasterxml.jackson.databind.SerializationFeature;
                  | import com.fasterxml.jackson.databind.type.CollectionType;
                  | import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
                  | 
                  | import java.io.File;
                  | import java.io.IOException;
                  | import java.text.SimpleDateFormat;
                  | import java.util.ArrayList;
                  | 
                  | /**
                  |  * @author Dimasavr
                  |  */
                  | 
                  | public class JsonParser {
                  |     private ObjectMapper mapper;
                  | 
                  |     /**
                  |      * –ß—Ç–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ JSON
                  |      * @param nameOfFile
                  |      * @return ArrayList
                  |      */
                  |     public static ArrayList<HumanBeing> jsonToCollection(String nameOfFile) {
                  |         try {
                  | 
                  |             ObjectMapper mapper = new ObjectMapper();
                  |             mapper.registerModule(new JavaTimeModule());
                  |             mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"));
                  |             mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
                  | 
                  |             CollectionType hbFile = mapper.getTypeFactory().constructCollectionType(ArrayList.class, HumanBeing.class);
                  | 
                  |             File file = new File(nameOfFile);
                  | 
                  |             ArrayList<HumanBeing> hbOut = mapper.readValue(file, hbFile);
                  | 
                  |             return hbOut;
                  |         } catch (IOException e) {
                  |             System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: " + e.getMessage());
                  |             System.out.println("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
                  |             return null;
                  |         }
                  |     }
                  | 
                  |     /**
                  |      * –ó–∞–ø–∏—Å—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª JSON
                  |      * @param way
                  |      * @param data
                  |      */
                  |     public static void collectionToJson(String way, ArrayList<HumanBeing> data) {
                  |         ObjectMapper mapper = new ObjectMapper();
                  |         try {
                  |             mapper.enable(SerializationFeature.INDENT_OUTPUT);
                  |             mapper.registerModule(new JavaTimeModule());
                  |             mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
                  |             mapper.writeValue(new File(way), data);
                  |         } catch (IOException e) {
                  |             System.out.println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª: " + e.getMessage());
                  |         }
                  |     }
                  | 
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (JsonParser.java) ---

                üìÑ ScriptFileReader.java (5073 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (ScriptFileReader.java) ---
                  | package utils;
                  | 
                  | import classes.HumanBeing;
                  | import commands.AddElementCommand;
                  | import commands.AddIfMinCommand;
                  | import commands.Command;
                  | import commands.UpdateIDCommand;
                  | import exceptions.IllegalScriptLine;
                  | import exceptions.IncorrectArgsNumber;
                  | import functions.Invoker;
                  | import run.Main;
                  | 
                  | import java.io.File;
                  | import java.io.IOException;
                  | import java.util.Scanner;
                  | 
                  | ;
                  | 
                  | public class ScriptFileReader {
                  | 
                  | 
                  |     public void readFile(String fileName) {
                  | 
                  |         Invoker inv = Main.inv;
                  |         int numberOfLine = 1;
                  | 
                  |         try (Scanner scanner = new Scanner(new File(fileName))) {
                  |             System.out.println("–ù–∞—á–∞—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏–∑ —Ñ–∞–π–ª–∞");
                  |             while (scanner.hasNextLine()) {
                  |                 String lineIn = scanner.nextLine();
                  |                 String[] tokens = lineIn.split(" ");
                  | 
                  |                 String commandString = tokens[0].toLowerCase();
                  | 
                  |                 Command command = null;
                  |                 try {
                  |                     command = inv.commands.get(commandString);
                  |                 } catch (NullPointerException e) {
                  |                     System.out.println("–°—Ç—Ä–æ–∫–∞ " + numberOfLine + "–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Ç–∞–∫ –∫–∞–∫ —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
                  |                 }
                  | 
                  |                 if (commandString.equals("execute_script") && tokens[1].equals(fileName)) {
                  |                     throw new IllegalScriptLine("–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ñ–∞–π–ª –ø–æ–º–µ–Ω—è–π—Ç–µ —Å—Ç—Ä–æ–∫—É " + numberOfLine);
                  |                 }
                  | 
                  |                 try {
                  |                     if (commandString.equals("add") && tokens.length == 12) {
                  |                         AddElementCommand ch = new AddElementCommand() {
                  |                             @Override
                  |                             public void bodyOfCommand(String line) {
                  |                                 BuildersOfElement b = new BuildersOfElement();
                  |                                 HumanBeing toAdd = b.createNoAdd(false, scanner, lineIn);
                  |                                 cm.add(toAdd);
                  |                             }
                  |                         };
                  |                         ch.execute("");
                  |                     } else if (commandString.equals("add_if_min")) {
                  |                         AddIfMinCommand ch = new AddIfMinCommand() {
                  |                             @Override
                  |                             public void bodyOfCommand(String line) {
                  |                                 BuildersOfElement b = new BuildersOfElement();
                  |                                 HumanBeing h = b.createNoAdd(false, scanner, lineIn);
                  |                                 HumanBeing min = cm.findMin();
                  |                                 if (h.compareTo(min) < 0) {
                  |                                     cm.updateID(min.getId(), h);
                  |                                 }
                  |                             }
                  |                         };
                  |                         ch.execute("");
                  |                     } else if (commandString.equals("update_id")) {
                  |                         UpdateIDCommand ch = new UpdateIDCommand() {
                  |                             @Override
                  |                             public void bodyOfCommand(String argument) {
                  |                                 try {
                  |                                     int id = Integer.parseInt(argument);
                  |                                     BuildersOfElement b = new BuildersOfElement();
                  |                                     cm.updateID(id, b.createNoAdd(false, scanner, lineIn));
                  |                                 } catch (NumberFormatException e) {
                  |                                     System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π ID");
                  |                                 }
                  |                             }
                  |                         };
                  |                         ch.execute("");
                  |                     } else {
                  |                         if (tokens.length == 2) {
                  |                             command.execute(tokens[1]);
                  |                         } else if (tokens.length == 1){
                  |                             command.execute("");
                  |                         }
                  |                     }
                  |                 } catch (NullPointerException e) {
                  |                     System.out.println("–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ " + numberOfLine + " –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã...");
                  |                     break;
                  |                 }  catch (IllegalScriptLine e) {
                  |                     if (e.getMessage().contains("–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ñ–∞–π–ª –ø–æ–º–µ–Ω—è–π—Ç–µ —Å—Ç—Ä–æ–∫—É")) {
                  |                         scanner.nextLine();
                  |                         break;
                  |                     }
                  |                     System.out.println(e.getMessage());
                  |                 }
                  | 
                  |                 numberOfLine++;
                  |             }
                  |             System.out.println("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏–∑ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
                  |         } catch (IOException e) {
                  |             System.out.println("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É");
                  |         } catch (IllegalScriptLine e) {
                  |             System.out.println(e.getMessage());
                  |         } catch (IncorrectArgsNumber e) {
                  | 
                  |         }
                  | 
                  | 
                  |     }
                  | }
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (ScriptFileReader.java) ---

        üìÇ resources/
            üìÑ messages_es.properties (7502 bytes)
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (messages_es.properties) ---
              | login.title=Autenticaci√≥n
              | login.label.username=Nombre de usuario:
              | login.label.password=Contrase√±a:
              | login.button.login=Ingresar
              | login.button.register=Registrarse
              | login.label.language=Idioma:
              | login.message.authing=Autenticando...
              | login.message.registering=Registrando...
              | login.message.success=¬°Inicio de sesi√≥n exitoso!
              | login.message.registrationSuccess=¬°Registro completado exitosamente!
              | login.message.failed=Error de inicio de sesi√≥n. Nombre de usuario o contrase√±a incorrectos.
              | login.message.registrationFailed=Error de registro.
              | login.message.userExists=Ya existe un usuario con ese nombre de usuario.
              | login.message.fieldsCannotBeEmpty=Los campos 'Nombre de usuario' y 'Contrase√±a' no pueden estar vac√≠os.
              | 
              | # --- –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ ---
              | mainWindow.title=Gestor de Objetos SerHumano
              | mainWindow.label.currentUser=Usuario actual:
              | mainWindow.label.table=Tabla de objetos:
              | mainWindow.label.visualization=Visualizaci√≥n:
              | 
              | # --- –ú–µ–Ω—é ---
              | mainWindow.menu.file=Archivo
              | mainWindow.menu.file.changeUser=Cambiar usuario
              | mainWindow.menu.file.exit=Salir
              | 
              | mainWindow.menu.commands=Comandos
              | # –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ (–¥–ª—è –º–µ–Ω—é –∏ –∫–Ω–æ–ø–æ–∫)
              | command.add=Agregar nuevo...
              | command.update=Actualizar seleccionado...
              | command.remove=Eliminar seleccionado...
              | command.clear=Limpiar toda la colecci√≥n
              | command.executeScript=Ejecutar script...
              | command.info=Informaci√≥n de la colecci√≥n
              | command.removeFirst=Eliminar primer (elemento)
              | command.addIfMin=Agregar si es m√≠nimo...
              | command.sort=Ordenar (por defecto)
              | command.removeAnyByMood=Eliminar cualquiera por √°nimo...
              | command.minBySoundtrackName=M√≠nimo por nombre de banda sonora
              | command.countGreaterThanMood=Cantidad con √°nimo > ...
              | command.help=Ayuda
              | 
              | mainWindow.menu.language=Idioma
              | mainWindow.menu.language.russian=Ruso
              | mainWindow.menu.language.norwegian=Noruego
              | mainWindow.menu.language.french=Franc√©s
              | mainWindow.menu.language.spanish_sv=Espa√±ol (El Salvador)
              | 
              | # --- –¢–∞–±–ª–∏—Ü–∞ ---
              | table.column.id=ID
              | table.column.name=Nombre
              | table.column.coordinateX=Coordenada X
              | table.column.coordinateY=Coordenada Y
              | table.column.creationDate=Fecha de creaci√≥n
              | table.column.realHero=H√©roe real
              | table.column.hasToothpick=Tiene palillo
              | table.column.impactSpeed=Velocidad de impacto
              | table.column.soundtrackName=Nombre de banda sonora
              | table.column.weaponType=Tipo de arma
              | table.column.mood=√Ånimo
              | table.column.carName=Carro (nombre)
              | table.column.carCool=Carro (genialidad)
              | table.column.ownerId=ID de propietario
              | 
              | table.filter.label=Filtro:
              | table.button.edit=Editar
              | table.button.delete=Eliminar
              | 
              | # --- –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ ---
              | dialog.addEdit.title.add=Agregar objeto SerHumano
              | dialog.addEdit.title.edit=Editar objeto SerHumano
              | dialog.addEdit.label.name=Nombre:
              | dialog.addEdit.label.coordinateX=Coordenada X:
              | dialog.addEdit.label.coordinateY=Coordenada Y:
              | dialog.addEdit.label.realHero=H√©roe real:
              | dialog.addEdit.label.hasToothpick=Tiene palillo:
              | dialog.addEdit.label.impactSpeed=Velocidad de impacto:
              | dialog.addEdit.label.soundtrackName=Nombre de banda sonora:
              | dialog.addEdit.label.weaponType=Tipo de arma:
              | dialog.addEdit.label.mood=√Ånimo:
              | dialog.addEdit.label.carName=Nombre del carro:
              | dialog.addEdit.label.carCool=Genialidad del carro:
              | dialog.addEdit.button.save=Guardar
              | dialog.addEdit.button.cancel=Cancelar
              | dialog.addEdit.validation.nameEmpty=El nombre no puede estar vac√≠o.
              | dialog.addEdit.validation.coordinateXInvalid=La coordenada X debe ser un n√∫mero.
              | dialog.addEdit.validation.coordinateYInvalid=La coordenada Y debe ser un n√∫mero.
              | dialog.addEdit.validation.impactSpeedInvalid=La velocidad de impacto debe ser un n√∫mero (o estar vac√≠a).
              | dialog.addEdit.validation.soundtrackEmpty=El nombre de la banda sonora no puede estar vac√≠o.
              | dialog.addEdit.validation.carNameEmpty=El nombre del carro no puede estar vac√≠o.
              | dialog.addEdit.validation.notYourObject=No puede editar este objeto, pertenece a otro usuario.
              | 
              | # --- –ó–Ω–∞—á–µ–Ω–∏—è Enum ---
              | enum.mood.SADNESS=TRISTEZA
              | enum.mood.SORROW=PENA
              | enum.mood.GLOOM=MELANCOL√çA
              | enum.mood.CALM=CALMA
              | 
              | enum.weaponType.HAMMER=MARTILLO
              | enum.weaponType.AXE=HACHA
              | enum.weaponType.PISTOL=PISTOLA
              | enum.weaponType.SHOTGUN=ESCOPETA
              | enum.weaponType.KNIFE=CUCHILLO
              | 
              | # --- –û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–∏–∞–ª–æ–≥–∏ ---
              | dialog.title.error=Error
              | dialog.title.warning=Advertencia
              | dialog.title.info=Informaci√≥n
              | dialog.title.confirmation=Confirmaci√≥n
              | 
              | dialog.message.selectObjectFirst=Por favor, seleccione primero un objeto en la tabla.
              | dialog.message.confirmDelete=¬øEst√° seguro de que desea eliminar el objeto seleccionado?
              | dialog.message.confirmClear=¬øEst√° seguro de que desea eliminar todos los objetos de la colecci√≥n?
              | dialog.message.scriptFilePrompt=Especifique la ruta al archivo de script:
              | dialog.message.scriptExecuted=Script ejecutado.
              | dialog.message.scriptError=Error al ejecutar el script.
              | dialog.message.objectAdded=Objeto agregado exitosamente.
              | dialog.message.objectUpdated=Objeto actualizado exitosamente.
              | dialog.message.objectDeleted=Objeto eliminado exitosamente.
              | dialog.message.collectionCleared=Colecci√≥n limpiada exitosamente.
              | dialog.message.notYourObjectToDelete=No puede eliminar este objeto, pertenece a otro usuario.
              | 
              | dialog.confirmExit.message=¬øEst√°s seguro de que quieres salir?
              | 
              | # --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ---
              | visualization.objectInfo.title=Informaci√≥n del objeto
              | visualization.objectInfo.field.id=ID:
              | visualization.objectInfo.field.name=Nombre:
              | visualization.objectInfo.field.coordinateX=Coordenada X:
              | visualization.objectInfo.field.coordinateY=Coordenada Y:
              | visualization.objectInfo.field.creationDate=Fecha de creaci√≥n:
              | visualization.objectInfo.field.realHero=H√©roe real:
              | visualization.objectInfo.field.hasToothpick=Tiene palillo:
              | visualization.objectInfo.field.impactSpeed=Velocidad de impacto:
              | visualization.objectInfo.field.soundtrackName=Nombre de banda sonora:
              | visualization.objectInfo.field.weaponType=Tipo de arma:
              | visualization.objectInfo.field.mood=√Ånimo:
              | visualization.objectInfo.field.carName=Carro (nombre):
              | visualization.objectInfo.field.carCool=Carro (genialidad):
              | visualization.objectInfo.field.ownerId=ID de propietario:
              | 
              | # --- –ö–Ω–æ–ø–∫–∏ OK/Cancel/Yes/No ---
              | button.ok=Aceptar
              | button.cancel=Cancelar
              | button.yes=S√≠
              | button.no=No
              | button.apply=Aplicar
              | button.close=Cerrar
              | 
              | # --- –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∫–æ–º–∞–Ω–¥ ---
              | command.error.general=Error al ejecutar el comando.
              | command.error.noAccess=No tiene permisos para ejecutar este comando sobre este objeto.
              | command.error.dbError=Error de base de datos.
              | command.error.updateFailed=No se pudo actualizar el objeto.
              | command.error.addFailed=No se pudo agregar el objeto.
              | command.error.removeFailed=No se pudo eliminar el objeto.
              | command.error.clearFailed=No se pudo limpiar la colecci√≥n.
              | command.error.argumentRequired=Este comando requiere un argumento.
              | command.error.invalidArgumentFormat=Formato de argumento inv√°lido.
              | 
              | # --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã info) ---
              | info.collectionType=Tipo de colecci√≥n:
              | info.creationDate=Fecha de inicializaci√≥n:
              | info.numberOfElements=Cantidad de elementos:
              | 
              | # --- –°–ø—Ä–∞–≤–∫–∞ (—Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω –≤–∞–º–∏/–≤–∑—è—Ç –∏–∑ help) ---
              | help.title=Ayuda de comandos
              | help.text=Esta aplicaci√≥n permite gestionar una colecci√≥n de objetos SerHumano...
              --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (messages_es.properties) ---

            üìÑ messages_fr.properties (7638 bytes)
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (messages_fr.properties) ---
              | login.label.username=Nom d'utilisateur :
              | login.label.password=Mot de passe :
              | login.button.login=Se connecter
              | login.button.register=S'inscrire
              | login.label.language=Langue :
              | login.message.authing=Authentification en cours...
              | login.message.registering=Inscription en cours...
              | login.message.success=Connexion r√©ussie !
              | login.message.registrationSuccess=Inscription r√©ussie !
              | login.message.failed=√âchec de la connexion. Nom d'utilisateur ou mot de passe incorrect.
              | login.message.registrationFailed=√âchec de l'inscription.
              | login.message.userExists=Un utilisateur avec ce nom d'utilisateur existe d√©j√†.
              | login.message.fieldsCannotBeEmpty=Les champs 'Nom d'utilisateur' et 'Mot de passe' ne peuvent pas √™tre vides.
              | login.title=Authentification
              | 
              | # --- –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ ---
              | mainWindow.title=Gestionnaire d'objets Humain
              | mainWindow.label.currentUser=Utilisateur actuel :
              | mainWindow.label.table=Tableau des objets :
              | mainWindow.label.visualization=Visualisation :
              | 
              | # --- –ú–µ–Ω—é ---
              | mainWindow.menu.file=Fichier
              | mainWindow.menu.file.changeUser=Changer d'utilisateur
              | mainWindow.menu.file.exit=Quitter
              | 
              | mainWindow.menu.commands=Commandes
              | # –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ (–¥–ª—è –º–µ–Ω—é –∏ –∫–Ω–æ–ø–æ–∫)
              | command.add=Ajouter nouveau...
              | command.update=Modifier s√©lectionn√©...
              | command.remove=Supprimer s√©lectionn√©...
              | command.clear=Vider toute la collection
              | command.executeScript=Ex√©cuter le script...
              | command.info=Informations sur la collection
              | command.removeFirst=Supprimer le premier (√©l√©ment)
              | command.addIfMin=Ajouter si minimum...
              | command.sort=Trier (par d√©faut)
              | command.removeAnyByMood=Supprimer par humeur...
              | command.minBySoundtrackName=Minimum par nom de bande sonore
              | command.countGreaterThanMood=Nombre avec humeur > ...
              | command.help=Aide
              | 
              | mainWindow.menu.language=Langue
              | mainWindow.menu.language.russian=Russe
              | mainWindow.menu.language.norwegian=Norv√©gien
              | mainWindow.menu.language.french=Fran√ßais
              | mainWindow.menu.language.spanish_sv=Espagnol (Salvador)
              | 
              | # --- –¢–∞–±–ª–∏—Ü–∞ ---
              | table.column.id=ID
              | table.column.name=Nom
              | table.column.coordinateX=Coordonn√©e X
              | table.column.coordinateY=Coordonn√©e Y
              | table.column.creationDate=Date de cr√©ation
              | table.column.realHero=Vrai h√©ros
              | table.column.hasToothpick=A un cure-dent
              | table.column.impactSpeed=Vitesse d'impact
              | table.column.soundtrackName=Nom de la bande sonore
              | table.column.weaponType=Type d'arme
              | table.column.mood=Humeur
              | table.column.carName=Voiture (nom)
              | table.column.carCool=Voiture (cool)
              | table.column.ownerId=ID du propri√©taire
              | 
              | table.filter.label=Filtre :
              | table.button.edit=Modifier
              | table.button.delete=Supprimer
              | 
              | # --- –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ ---
              | dialog.addEdit.title.add=Ajout d'un objet Humain
              | dialog.addEdit.title.edit=Modification d'un objet Humain
              | dialog.addEdit.label.name=Nom :
              | dialog.addEdit.label.coordinateX=Coordonn√©e X :
              | dialog.addEdit.label.coordinateY=Coordonn√©e Y :
              | dialog.addEdit.label.realHero=Vrai h√©ros :
              | dialog.addEdit.label.hasToothpick=A un cure-dent :
              | dialog.addEdit.label.impactSpeed=Vitesse d'impact :
              | dialog.addEdit.label.soundtrackName=Nom de la bande sonore :
              | dialog.addEdit.label.weaponType=Type d'arme :
              | dialog.addEdit.label.mood=Humeur :
              | dialog.addEdit.label.carName=Nom de la voiture :
              | dialog.addEdit.label.carCool=Voiture cool :
              | dialog.addEdit.button.save=Enregistrer
              | dialog.addEdit.button.cancel=Annuler
              | dialog.addEdit.validation.nameEmpty=Le nom ne peut pas √™tre vide.
              | dialog.addEdit.validation.coordinateXInvalid=La coordonn√©e X doit √™tre un nombre.
              | dialog.addEdit.validation.coordinateYInvalid=La coordonn√©e Y doit √™tre un nombre.
              | dialog.addEdit.validation.impactSpeedInvalid=La vitesse d'impact doit √™tre un nombre (ou vide).
              | dialog.addEdit.validation.soundtrackEmpty=Le nom de la bande sonore ne peut pas √™tre vide.
              | dialog.addEdit.validation.carNameEmpty=Le nom de la voiture ne peut pas √™tre vide.
              | dialog.addEdit.validation.notYourObject=Vous ne pouvez pas modifier cet objet, il appartient √† un autre utilisateur.
              | 
              | # --- –ó–Ω–∞—á–µ–Ω–∏—è Enum ---
              | enum.mood.SADNESS=Tristesse
              | enum.mood.SORROW=Chagrin
              | enum.mood.GLOOM=M√©lancolie
              | enum.mood.CALM=Calme
              | 
              | enum.weaponType.HAMMER=Marteau
              | enum.weaponType.AXE=Hache
              | enum.weaponType.PISTOL=Pistolet
              | enum.weaponType.SHOTGUN=Fusil √† pompe
              | enum.weaponType.KNIFE=Couteau
              | 
              | # --- –û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–∏–∞–ª–æ–≥–∏ ---
              | dialog.title.error=Erreur
              | dialog.title.warning=Avertissement
              | dialog.title.info=Information
              | dialog.title.confirmation=Confirmation
              | 
              | dialog.message.selectObjectFirst=Veuillez d'abord s√©lectionner un objet dans le tableau.
              | dialog.message.confirmDelete=√ätes-vous s√ªr de vouloir supprimer l'objet s√©lectionn√© ?
              | dialog.message.confirmClear=√ätes-vous s√ªr de vouloir vider tous les objets de la collection ?
              | dialog.message.scriptFilePrompt=Veuillez indiquer le chemin d'acc√®s au fichier script :
              | dialog.message.scriptExecuted=Script ex√©cut√©.
              | dialog.message.scriptError=Erreur lors de l'ex√©cution du script.
              | dialog.message.objectAdded=Objet ajout√© avec succ√®s.
              | dialog.message.objectUpdated=Objet mis √† jour avec succ√®s.
              | dialog.message.objectDeleted=Objet supprim√© avec succ√®s.
              | dialog.message.collectionCleared=Collection vid√©e avec succ√®s.
              | dialog.message.notYourObjectToDelete=Vous ne pouvez pas supprimer cet objet, il appartient √† un autre utilisateur.
              | dialog.confirmExit.message=√ätes-vous s√ªr de vouloir sortir?
              | 
              | # --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ---
              | visualization.objectInfo.title=Informations sur l'objet
              | visualization.objectInfo.field.id=ID :
              | visualization.objectInfo.field.name=Nom :
              | visualization.objectInfo.field.coordinateX=Coordonn√©e X :
              | visualization.objectInfo.field.coordinateY=Coordonn√©e Y :
              | visualization.objectInfo.field.creationDate=Date de cr√©ation :
              | visualization.objectInfo.field.realHero=Vrai h√©ros :
              | visualization.objectInfo.field.hasToothpick=A un cure-dent :
              | visualization.objectInfo.field.impactSpeed=Vitesse d'impact :
              | visualization.objectInfo.field.soundtrackName=Nom de la bande sonore :
              | visualization.objectInfo.field.weaponType=Type d'arme :
              | visualization.objectInfo.field.mood=Humeur :
              | visualization.objectInfo.field.carName=Voiture (nom) :
              | visualization.objectInfo.field.carCool=Voiture (cool) :
              | visualization.objectInfo.field.ownerId=ID du propri√©taire :
              | 
              | # --- –ö–Ω–æ–ø–∫–∏ OK/Cancel/Yes/No ---
              | button.ok=OK
              | button.cancel=Annuler
              | button.yes=Oui
              | button.no=Non
              | button.apply=Appliquer
              | button.close=Fermer
              | 
              | # --- –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∫–æ–º–∞–Ω–¥ ---
              | command.error.general=Erreur d'ex√©cution de la commande.
              | command.error.noAccess=Vous n'avez pas les droits pour ex√©cuter cette commande sur cet objet.
              | command.error.dbError=Erreur de base de donn√©es.
              | command.error.updateFailed=√âchec de la mise √† jour de l'objet.
              | command.error.addFailed=√âchec de l'ajout de l'objet.
              | command.error.removeFailed=√âchec de la suppression de l'objet.
              | command.error.clearFailed=√âchec du vidage de la collection.
              | command.error.argumentRequired=Un argument est requis pour cette commande.
              | command.error.invalidArgumentFormat=Format d'argument invalide.
              | 
              | # --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã info) ---
              | info.collectionType=Type de collection :
              | info.creationDate=Date d'initialisation :
              | info.numberOfElements=Nombre d'√©l√©ments :
              | 
              | # --- –°–ø—Ä–∞–≤–∫–∞ (—Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω –≤–∞–º–∏/–≤–∑—è—Ç –∏–∑ help) ---
              | help.title=Aide sur les commandes
              | help.text=Cette application permet de g√©rer une collection d'objets Humain...
              --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (messages_fr.properties) ---

            üìÑ messages_no.properties (7015 bytes)
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (messages_no.properties) ---
              | login.title=Innlogging
              | login.label.username=Brukernavn:
              | login.label.password=Passord:
              | login.button.login=Logg inn
              | login.button.register=Registrer deg
              | login.label.language=Spr√•k:
              | login.message.authing=Logger inn...
              | login.message.registering=Registrerer...
              | login.message.success=Innlogging vellykket!
              | login.message.registrationSuccess=Registrering vellykket!
              | login.message.failed=Innloggingsfeil. Ugyldig brukernavn eller passord.
              | login.message.registrationFailed=Registreringsfeil.
              | login.message.userExists=Bruker med dette brukernavnet finnes allerede.
              | login.message.fieldsCannotBeEmpty=Feltene 'Brukernavn' og 'Passord' kan ikke v√¶re tomme.
              | 
              | # --- –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ ---
              | mainWindow.title=HumanBeing Objektbehandler
              | mainWindow.label.currentUser=N√•v√¶rende bruker:
              | mainWindow.label.table=Objekttabell:
              | mainWindow.label.visualization=Visualisering:
              | 
              | # --- –ú–µ–Ω—é ---
              | mainWindow.menu.file=Fil
              | mainWindow.menu.file.changeUser=Bytt bruker
              | mainWindow.menu.file.exit=Avslutt
              | 
              | mainWindow.menu.commands=Kommandoer
              | # –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ (–¥–ª—è –º–µ–Ω—é –∏ –∫–Ω–æ–ø–æ–∫)
              | command.add=Legg til ny...
              | command.update=Oppdater valgt...
              | command.remove=Fjern valgt...
              | command.clear=T√∏m hele samlingen
              | command.executeScript=Utf√∏r skript...
              | command.info=Informasjon om samlingen
              | command.removeFirst=Fjern f√∏rste (element)
              | command.addIfMin=Legg til hvis minimum...
              | command.sort=Sorter (standard)
              | command.removeAnyByMood=Fjern hvilken som helst etter hum√∏r...
              | command.minBySoundtrackName=Minimum etter lydspornavn
              | command.countGreaterThanMood=Antall med hum√∏r > ...
              | command.help=Hjelp
              | 
              | mainWindow.menu.language=Spr√•k
              | mainWindow.menu.language.russian=Russisk
              | mainWindow.menu.language.norwegian=Norsk
              | mainWindow.menu.language.french=Fransk
              | mainWindow.menu.language.spanish_sv=Spansk (El Salvador)
              | 
              | # --- –¢–∞–±–ª–∏—Ü–∞ ---
              | table.column.id=ID
              | table.column.name=Navn
              | table.column.coordinateX=Koordinat X
              | table.column.coordinateY=Koordinat Y
              | table.column.creationDate=Opprettelsesdato
              | table.column.realHero=Ekte helt
              | table.column.hasToothpick=Har tannpirker
              | table.column.impactSpeed=Slaghastighet
              | table.column.soundtrackName=Lydspornavn
              | table.column.weaponType=V√•pentype
              | table.column.mood=Hum√∏r
              | table.column.carName=Bil (navn)
              | table.column.carCool=Bil (kulhet)
              | table.column.ownerId=Eier-ID
              | 
              | table.filter.label=Filter:
              | table.button.edit=Rediger
              | table.button.delete=Slett
              | 
              | # --- –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ ---
              | dialog.addEdit.title.add=Legg til HumanBeing-objekt
              | dialog.addEdit.title.edit=Rediger HumanBeing-objekt
              | dialog.addEdit.label.name=Navn:
              | dialog.addEdit.label.coordinateX=Koordinat X:
              | dialog.addEdit.label.coordinateY=Koordinat Y:
              | dialog.addEdit.label.realHero=Ekte helt:
              | dialog.addEdit.label.hasToothpick=Har tannpirker:
              | dialog.addEdit.label.impactSpeed=Slaghastighet:
              | dialog.addEdit.label.soundtrackName=Lydspornavn:
              | dialog.addEdit.label.weaponType=V√•pentype:
              | dialog.addEdit.label.mood=Hum√∏r:
              | dialog.addEdit.label.carName=Bilnavn:
              | dialog.addEdit.label.carCool=Bilens kulhet:
              | dialog.addEdit.button.save=Lagre
              | dialog.addEdit.button.cancel=Avbryt
              | dialog.addEdit.validation.nameEmpty=Navn kan ikke v√¶re tomt.
              | dialog.addEdit.validation.coordinateXInvalid=Koordinat X m√• v√¶re et tall.
              | dialog.addEdit.validation.coordinateYInvalid=Koordinat Y m√• v√¶re et tall.
              | dialog.addEdit.validation.impactSpeedInvalid=Slaghastighet m√• v√¶re et tall (eller tomt).
              | dialog.addEdit.validation.soundtrackEmpty=Lydspornavn kan ikke v√¶re tomt.
              | dialog.addEdit.validation.carNameEmpty=Bilnavn kan ikke v√¶re tomt.
              | dialog.addEdit.validation.notYourObject=Du kan ikke redigere dette objektet, det tilh√∏rer en annen bruker.
              | 
              | # --- –ó–Ω–∞—á–µ–Ω–∏—è Enum ---
              | enum.mood.SADNESS=TRISTHET
              | enum.mood.SORROW=SORG
              | enum.mood.GLOOM=TUNGSIÃáNN
              | enum.mood.CALM=RO
              | 
              | enum.weaponType.HAMMER=HAMMER
              | enum.weaponType.AXE=√òKS
              | enum.weaponType.PISTOL=PISTOL
              | enum.weaponType.SHOTGUN=HAGLE
              | enum.weaponType.KNIFE=KNIV
              | 
              | # --- –û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–∏–∞–ª–æ–≥–∏ ---
              | dialog.title.error=Feil
              | dialog.title.warning=Advarsel
              | dialog.title.info=Informasjon
              | dialog.title.confirmation=Bekreftelse
              | 
              | dialog.message.selectObjectFirst=Vennligst velg et objekt i tabellen f√∏rst.
              | dialog.message.confirmDelete=Er du sikker p√• at du vil slette det valgte objektet?
              | dialog.message.confirmClear=Er du sikker p√• at du vil t√∏mme alle objekter fra samlingen?
              | dialog.message.scriptFilePrompt=Angi sti til skriptfilen:
              | dialog.message.scriptExecuted=Skript utf√∏rt.
              | dialog.message.scriptError=Feil under kj√∏ring av skript.
              | dialog.message.objectAdded=Objekt lagt til.
              | dialog.message.objectUpdated=Objekt oppdatert.
              | dialog.message.objectDeleted=Objekt slettet.
              | dialog.message.collectionCleared=Samling t√∏mt.
              | dialog.message.notYourObjectToDelete=Du kan ikke slette dette objektet, det tilh√∏rer en annen bruker.
              | 
              | dialog.confirmExit.message=Er du sikker p√• at du vil ut?
              | 
              | # --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ---
              | visualization.objectInfo.title=Objektinformasjon
              | visualization.objectInfo.field.id=ID:
              | visualization.objectInfo.field.name=Navn:
              | visualization.objectInfo.field.coordinateX=Koordinat X:
              | visualization.objectInfo.field.coordinateY=Koordinat Y:
              | visualization.objectInfo.field.creationDate=Opprettelsesdato:
              | visualization.objectInfo.field.realHero=Ekte helt:
              | visualization.objectInfo.field.hasToothpick=Har tannpirker:
              | visualization.objectInfo.field.impactSpeed=Slaghastighet:
              | visualization.objectInfo.field.soundtrackName=Lydspornavn:
              | visualization.objectInfo.field.weaponType=V√•pentype:
              | visualization.objectInfo.field.mood=Hum√∏r:
              | visualization.objectInfo.field.carName=Bil (navn):
              | visualization.objectInfo.field.carCool=Bil (kulhet):
              | visualization.objectInfo.field.ownerId=Eier-ID:
              | 
              | # --- –ö–Ω–æ–ø–∫–∏ OK/Cancel/Yes/No ---
              | button.ok=OK
              | button.cancel=Avbryt
              | button.yes=Ja
              | button.no=Nei
              | button.apply=Bruk
              | button.close=Lukk
              | 
              | # --- –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∫–æ–º–∞–Ω–¥ ---
              | command.error.general=Feil ved utf√∏ring av kommando.
              | command.error.noAccess=Du har ikke tilgang til √• utf√∏re denne kommandoen p√• dette objektet.
              | command.error.dbError=Databasefeil.
              | command.error.updateFailed=Kunne ikke oppdatere objektet.
              | command.error.addFailed=Kunne ikke legge til objektet.
              | command.error.removeFailed=Kunne ikke fjerne objektet.
              | command.error.clearFailed=Kunne ikke t√∏mme samlingen.
              | command.error.argumentRequired=Denne kommandoen krever et argument.
              | command.error.invalidArgumentFormat=Ugyldig argumentformat.
              | 
              | # --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã info) ---
              | info.collectionType=Samlingstype:
              | info.creationDate=Initialiseringsdato:
              | info.numberOfElements=Antall elementer:
              | 
              | # --- –°–ø—Ä–∞–≤–∫–∞ (—Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω –≤–∞–º–∏/–≤–∑—è—Ç –∏–∑ help) ---
              | help.title=Hjelp for kommandoer
              | help.text=Denne applikasjonen lar deg administrere en samling av HumanBeing-objekter...
              --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (messages_no.properties) ---

            üìÑ messages_ru.properties (9775 bytes)
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (messages_ru.properties) ---
              | login.title=–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
              | login.label.username=–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
              | login.label.password=–ü–∞—Ä–æ–ª—å:
              | login.button.login=–í–æ–π—Ç–∏
              | login.button.register=–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
              | login.label.language=–Ø–∑—ã–∫:
              | login.message.authing=–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...
              | login.message.registering=–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...
              | login.message.success=–í—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!
              | login.message.registrationSuccess=–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
              | login.message.failed=–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.
              | login.message.registrationFailed=–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
              | login.message.userExists=–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
              | login.message.fieldsCannotBeEmpty=–ü–æ–ª—è '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' –∏ '–ü–∞—Ä–æ–ª—å' –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.
              | 
              | # --- –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ ---
              | mainWindow.title=–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ HumanBeing
              | mainWindow.label.currentUser=–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
              | mainWindow.label.table=–¢–∞–±–ª–∏—Ü–∞ –æ–±—ä–µ–∫—Ç–æ–≤:
              | mainWindow.label.visualization=–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:
              | 
              | # --- –ú–µ–Ω—é ---
              | mainWindow.menu.file=–§–∞–π–ª
              | mainWindow.menu.file.changeUser=–°–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              | mainWindow.menu.file.exit=–í—ã—Ö–æ–¥
              | 
              | mainWindow.menu.commands=–ö–æ–º–∞–Ω–¥—ã
              | # –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ (–¥–ª—è –º–µ–Ω—é –∏ –∫–Ω–æ–ø–æ–∫)
              | command.add=–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π...
              | command.update=–û–±–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π...
              | command.remove=–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π...
              | command.clear=–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
              | command.executeScript=–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä–∏–ø—Ç...
              | command.info=–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
              | command.removeFirst=–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–≤—ã–π (—ç–ª–µ–º–µ–Ω—Ç)
              | command.addIfMin=–î–æ–±–∞–≤–∏—Ç—å –µ—Å–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π...
              | command.sort=–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
              | command.removeAnyByMood=–£–¥–∞–ª–∏—Ç—å –ª—é–±–æ–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é...
              | command.minBySoundtrackName=–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ –Ω–∞–∑–≤. —Å–∞—É–Ω–¥—Ç—Ä–µ–∫–∞
              | command.countGreaterThanMood=–ö–æ–ª-–≤–æ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º > ...
              | command.help=–°–ø—Ä–∞–≤–∫–∞
              | 
              | mainWindow.menu.language=–Ø–∑—ã–∫
              | mainWindow.menu.language.russian=–†—É—Å—Å–∫–∏–π
              | mainWindow.menu.language.norwegian=–ù–æ—Ä–≤–µ–∂—Å–∫–∏–π
              | mainWindow.menu.language.french=–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π
              | mainWindow.menu.language.spanish_sv=–ò—Å–ø–∞–Ω—Å–∫–∏–π (–°–∞–ª—å–≤–∞–¥–æ—Ä)
              | 
              | # --- –¢–∞–±–ª–∏—Ü–∞ ---
              | table.column.id=ID
              | table.column.name=–ò–º—è
              | table.column.coordinateX=–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
              | table.column.coordinateY=–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
              | table.column.creationDate=–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
              | table.column.realHero=–ù–∞—Å—Ç–æ—è—â–∏–π –≥–µ—Ä–æ–π
              | table.column.hasToothpick=–ï—Å—Ç—å –∑—É–±–æ—á–∏—Å—Ç–∫–∞
              | table.column.impactSpeed=–°–∫–æ—Ä–æ—Å—Ç—å —É–¥–∞—Ä–∞
              | table.column.soundtrackName=–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞—É–Ω–¥—Ç—Ä–µ–∫–∞
              | table.column.weaponType=–¢–∏–ø –æ—Ä—É–∂–∏—è
              | table.column.mood=–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
              | table.column.carName=–ú–∞—à–∏–Ω–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ)
              | table.column.carCool=–ú–∞—à–∏–Ω–∞ (–∫—Ä—É—Ç–æ—Å—Ç—å)
              | table.column.ownerId=ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
              | 
              | table.filter.label=–§–∏–ª—å—Ç—Ä:
              | table.button.edit=–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              | table.button.delete=–£–¥–∞–ª–∏—Ç—å
              | 
              | # --- –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ ---
              | dialog.addEdit.title.add=–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ HumanBeing
              | dialog.addEdit.title.edit=–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ HumanBeing
              | dialog.addEdit.label.name=–ò–º—è:
              | dialog.addEdit.label.coordinateX=–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X:
              | dialog.addEdit.label.coordinateY=–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y:
              | dialog.addEdit.label.realHero=–ù–∞—Å—Ç–æ—è—â–∏–π –≥–µ—Ä–æ–π:
              | dialog.addEdit.label.hasToothpick=–ï—Å—Ç—å –∑—É–±–æ—á–∏—Å—Ç–∫–∞:
              | dialog.addEdit.label.impactSpeed=–°–∫–æ—Ä–æ—Å—Ç—å —É–¥–∞—Ä–∞:
              | dialog.addEdit.label.soundtrackName=–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞—É–Ω–¥—Ç—Ä–µ–∫–∞:
              | dialog.addEdit.label.weaponType=–¢–∏–ø –æ—Ä—É–∂–∏—è:
              | dialog.addEdit.label.mood=–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:
              | dialog.addEdit.label.carName=–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã:
              | dialog.addEdit.label.carCool=–ö—Ä—É—Ç–æ—Å—Ç—å –º–∞—à–∏–Ω—ã:
              | dialog.addEdit.button.save=–°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              | dialog.addEdit.button.cancel=–û—Ç–º–µ–Ω–∞
              | dialog.addEdit.validation.nameEmpty=–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.
              | dialog.addEdit.validation.coordinateXInvalid=–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.
              | dialog.addEdit.validation.coordinateYInvalid=–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.
              | dialog.addEdit.validation.impactSpeedInvalid=–°–∫–æ—Ä–æ—Å—Ç—å —É–¥–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–∏–ª–∏ –ø—É—Å—Ç–æ–π).
              | dialog.addEdit.validation.soundtrackEmpty=–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞—É–Ω–¥—Ç—Ä–µ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.
              | dialog.addEdit.validation.carNameEmpty=–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.
              | dialog.addEdit.validation.notYourObject=–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç, –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
              | 
              | # --- –ó–Ω–∞—á–µ–Ω–∏—è Enum ---
              | enum.mood.SADNESS=–ì—Ä—É—Å—Ç—å
              | enum.mood.SORROW=–ü–µ—á–∞–ª—å
              | enum.mood.GLOOM=–£–Ω—ã–Ω–∏–µ
              | enum.mood.CALM=–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ
              | 
              | enum.weaponType.HAMMER=–ú–æ–ª–æ—Ç
              | enum.weaponType.AXE=–¢–æ–ø–æ—Ä
              | enum.weaponType.PISTOL=–ü–∏—Å—Ç–æ–ª–µ—Ç
              | enum.weaponType.SHOTGUN=–î—Ä–æ–±–æ–≤–∏–∫
              | enum.weaponType.KNIFE=–ù–æ–∂
              | 
              | # --- –û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–∏–∞–ª–æ–≥–∏ ---
              | dialog.title.error=–û—à–∏–±–∫–∞
              | dialog.title.warning=–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
              | dialog.title.info=–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              | dialog.title.confirmation=–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
              | 
              | dialog.message.selectObjectFirst=–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ.
              | dialog.message.confirmDelete=–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç?
              | dialog.message.confirmClear=–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏?
              | dialog.message.scriptFilePrompt=–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–∫—Ä–∏–ø—Ç–∞:
              | dialog.message.scriptExecuted=–°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.
              | dialog.message.scriptError=–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞.
              | dialog.message.objectAdded=–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.
              | dialog.message.objectUpdated=–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.
              | dialog.message.objectDeleted=–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.
              | dialog.message.collectionCleared=–ö–æ–ª–ª–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.
              | dialog.message.notYourObjectToDelete=–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç, –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
              | 
              | dialog.confirmExit.message=–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?
              | 
              | # --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ---
              | visualization.objectInfo.title=–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ
              | # (–ø–æ–ª—è —Å—Ö–æ–∂–∏ —Å table.column.*, –Ω–æ –≤ visualization.objectInfo.field.* –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏/—Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º)
              | visualization.objectInfo.field.id=ID:
              | visualization.objectInfo.field.name=–ò–º—è:
              | visualization.objectInfo.field.coordinateX=–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X:
              | visualization.objectInfo.field.coordinateY=–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y:
              | visualization.objectInfo.field.creationDate=–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:
              | visualization.objectInfo.field.realHero=–ù–∞—Å—Ç–æ—è—â–∏–π –≥–µ—Ä–æ–π:
              | visualization.objectInfo.field.hasToothpick=–ï—Å—Ç—å –∑—É–±–æ—á–∏—Å—Ç–∫–∞:
              | visualization.objectInfo.field.impactSpeed=–°–∫–æ—Ä–æ—Å—Ç—å —É–¥–∞—Ä–∞:
              | visualization.objectInfo.field.soundtrackName=–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞—É–Ω–¥—Ç—Ä–µ–∫–∞:
              | visualization.objectInfo.field.weaponType=–¢–∏–ø –æ—Ä—É–∂–∏—è:
              | visualization.objectInfo.field.mood=–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:
              | visualization.objectInfo.field.carName=–ú–∞—à–∏–Ω–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ):
              | visualization.objectInfo.field.carCool=–ú–∞—à–∏–Ω–∞ (–∫—Ä—É—Ç–æ—Å—Ç—å):
              | visualization.objectInfo.field.ownerId=ID –≤–ª–∞–¥–µ–ª—å—Ü–∞:
              | # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π HumanBeing
              | 
              | # --- –ö–Ω–æ–ø–∫–∏ OK/Cancel/Yes/No ---
              | button.ok=–û–ö
              | button.cancel=–û—Ç–º–µ–Ω–∞
              | button.yes=–î–∞
              | button.no=–ù–µ—Ç
              | button.apply=–ü—Ä–∏–º–µ–Ω–∏—Ç—å
              | button.close=–ó–∞–∫—Ä—ã—Ç—å
              | 
              | # --- –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∫–æ–º–∞–Ω–¥ ---
              | command.error.general=–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
              | command.error.noAccess=–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–∞–¥ –¥–∞–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º.
              | command.error.dbError=–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
              | command.error.updateFailed=–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç.
              | command.error.addFailed=–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç.
              | command.error.removeFailed=–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç.
              | command.error.clearFailed=–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é.
              | command.error.argumentRequired=–î–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç.
              | command.error.invalidArgumentFormat=–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞.
              | 
              | # --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã info) ---
              | info.collectionType=–¢–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏:
              | info.creationDate=–î–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:
              | info.numberOfElements=–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
              | 
              | # --- –°–ø—Ä–∞–≤–∫–∞ (—Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω –≤–∞–º–∏/–≤–∑—è—Ç –∏–∑ help) ---
              | help.title=–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
              | help.text=–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –æ–±—ä–µ–∫—Ç–æ–≤ HumanBeing...
              --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (messages_ru.properties) ---

            üìÇ sql/
                üìÑ create.sql (1478 bytes)
                  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (create.sql) ---
                  | BEGIN;
                  | 
                  | CREATE TABLE IF NOT EXISTS collection (
                  |     element_id INTEGER ,
                  |     owner_id INTEGER NOT NULL
                  | );
                  | 
                  | CREATE TABLE IF NOT EXISTS hb (
                  |     id SERIAL PRIMARY KEY ,
                  |     name TEXT NOT NULL ,
                  |     coords_id INTEGER NOT NULL ,
                  |     creation_date DATE NOT NULL DEFAULT CURRENT_DATE ,
                  |     real_hero BOOLEAN NOT NULL ,
                  |     has_toothpick BOOLEAN NOT NULL ,
                  |     impact_speed BIGINT ,
                  |     soundtrack_name TEXT NOT NULL ,
                  |     weapon_type TEXT NOT NULL ,
                  |     mood TEXT ,
                  |     car_id INTEGER
                  | );
                  | 
                  | CREATE TABLE IF NOT EXISTS users (
                  |     user_id SERIAL PRIMARY KEY ,
                  |     login TEXT NOT NULL UNIQUE ,
                  |     password TEXT
                  | );
                  | 
                  | CREATE TABLE IF NOT EXISTS coords (
                  |     id_coord SERIAL PRIMARY KEY ,
                  |     x BIGINT NOT NULL ,
                  |     y BIGINT NOT NULL
                  | );
                  | 
                  | CREATE TABLE IF NOT EXISTS cars (
                  |     id_car SERIAL PRIMARY KEY ,
                  |     name_car TEXT NOT NULL ,
                  |     cool BOOLEAN NOT NULL
                  | );
                  | 
                  | ALTER TABLE collection
                  |     ADD FOREIGN KEY (element_id) REFERENCES hb(id)
                  |         ON UPDATE CASCADE ON DELETE CASCADE ;
                  | 
                  | ALTER TABLE collection
                  |     ADD FOREIGN KEY (owner_id) REFERENCES users(user_id)
                  |         ON UPDATE CASCADE ON DELETE CASCADE ;
                  | 
                  | ALTER TABLE hb
                  |     ADD FOREIGN KEY (coords_id) REFERENCES coords(id_coord)
                  |         ON UPDATE CASCADE ON DELETE CASCADE ;
                  | 
                  | ALTER TABLE hb
                  |     ADD FOREIGN KEY (car_id) REFERENCES cars(id_car)
                  |         ON UPDATE CASCADE ON DELETE CASCADE ;
                  | 
                  | ALTER TABLE hb
                  |     ADD CONSTRAINT name_not_empty
                  |         CHECK (name <> '');
                  | 
                  | END ;
                  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (create.sql) ---

        üìÇ trash/
            üìÑ 1.png (129079 bytes)
              [–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: .png) –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ]

            üìÑ 2.png (43922 bytes)
              [–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: .png) –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ]

            üìÑ 3.png (121941 bytes)
              [–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: .png) –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ]

    üìÇ test/
        üìÇ java/
            üìÑ Test.java (323 bytes)
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (Test.java) ---
              | import utils.DocumentFieldBuilder;
              | 
              | import java.util.Scanner;
              | 
              | public class Test {
              |     public static void main(String[] args) throws Exception {
              |         DocumentFieldBuilder dfb = new DocumentFieldBuilder();
              |         Scanner sc = new Scanner(System.in);
              |         System.out.println(dfb.build(sc, null));
              | 
              |     }
              | }
              --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û (Test.java) ---

