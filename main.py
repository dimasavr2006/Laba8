import argparse
import os
from datetime import datetime

# –§–∞–π–ª—ã —Å –∫–∞–∫–∏–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ —Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∏ –ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å
# –ú–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫
TEXT_FILE_EXTENSIONS = {
    '.java', '.py', '.js', '.ts', '.html', '.css', '.scss', '.xml', '.json',
    '.yaml', '.yml', '.properties', '.ini', '.conf', '.cfg', '.txt', '.md',
    '.sh', '.bat', '.ps1', '.gradle', '.sql', '.c', '.cpp', '.h', '.hpp',
    '.cs', '.go', '.rb', '.php', '.swift', '.kt', '.kts'
}

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å (—á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –º–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
# –ú–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å
IGNORE_DIRS = {
    '.git', '.idea', '.vscode', 'node_modules', 'bower_components',
    'vendor', 'target', 'build', 'dist', 'out', '__pycache__', '.gradle',
    'bin', 'obj'
}

# –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∏–º–µ–Ω–∏ (–Ω–µ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é)
IGNORE_FILES = {
    '.DS_Store', 'Thumbs.db'
}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
# (—á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —á–∏—Ç–∞—Ç—å –æ–≥—Ä–æ–º–Ω—ã–µ –ª–æ–≥–∏ –∏–ª–∏ –±–∏–Ω–∞—Ä–Ω–∏–∫–∏, –æ—à–∏–±–æ—á–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞ —Ç–µ–∫—Å—Ç)
MAX_TEXT_FILE_SIZE = 1 * 1024 * 1024  # 1 MB

def get_project_structure(project_path, output_file_path, max_depth=None, include_content=True):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤.

    :param project_path: –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.
    :param output_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫—É–¥–∞ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    :param max_depth: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –æ–±—Ö–æ–¥–∞. None - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
    :param include_content: –í–∫–ª—é—á–∞—Ç—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤.
    """
    if not os.path.isdir(project_path):
        print(f"–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{project_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    with open(output_file_path, 'w', encoding='utf-8') as outfile:
        outfile.write(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: {os.path.abspath(project_path)}\n")
        outfile.write(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        outfile.write("=" * 80 + "\n\n")

        for root, dirs, files in os.walk(project_path, topdown=True):
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º dirs –Ω–∞ –º–µ—Å—Ç–µ, —á—Ç–æ–±—ã os.walk –Ω–µ –∑–∞—Ö–æ–¥–∏–ª –≤ –Ω–∏—Ö
            dirs[:] = [d for d in dirs if d not in IGNORE_DIRS]

            level = root.replace(project_path, '').count(os.sep)
            if max_depth is not None and level > max_depth:
                dirs[:] = [] # –ù–µ —É–≥–ª—É–±–ª—è–µ–º—Å—è –¥–∞–ª—å—à–µ
                continue

            indent = ' ' * 4 * level
            outfile.write(f"{indent}üìÇ {os.path.basename(root) if root != project_path else project_path}/\n")
            sub_indent = ' ' * 4 * (level + 1)

            for f_name in sorted(files):
                if f_name in IGNORE_FILES:
                    continue

                file_path = os.path.join(root, f_name)
                file_ext = os.path.splitext(f_name)[1].lower()
                file_size = os.path.getsize(file_path)

                outfile.write(f"{sub_indent}üìÑ {f_name} ({file_size} bytes)\n")

                if include_content and file_ext in TEXT_FILE_EXTENSIONS:
                    if file_size == 0:
                        outfile.write(f"{sub_indent}  [–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø—É—Å—Ç–æ–µ]\n\n")
                    elif file_size > MAX_TEXT_FILE_SIZE:
                        outfile.write(f"{sub_indent}  [–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (>{MAX_TEXT_FILE_SIZE // 1024} KB)]\n\n")
                    else:
                        try:
                            with open(file_path, 'r', encoding='utf-8', errors='ignore') as infile:
                                content = infile.read()
                            outfile.write(f"{sub_indent}  --- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê ({f_name}) ---\n")
                            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –∫ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                            for line in content.splitlines():
                                outfile.write(f"{sub_indent}  | {line}\n")
                            outfile.write(f"{sub_indent}  --- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û ({f_name}) ---\n\n")
                        except Exception as e:
                            outfile.write(f"{sub_indent}  [–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {e}]\n\n")
                elif include_content: # –ï—Å–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π, –Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–ø—Ä–æ—à–µ–Ω
                     outfile.write(f"{sub_indent}  [–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_ext}) –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ]\n\n")


    print(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {os.path.abspath(output_file_path)}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω –æ—Ç—á–µ—Ç.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument("project_path", help="–ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
    parser.add_argument(
        "-o", "--output",
        default="project_structure_report.txt",
        help="–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: project_structure_report.txt)."
    )
    parser.add_argument(
        "--max-depth",
        type=int,
        default=None,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)."
    )
    parser.add_argument(
        "--no-content",
        action="store_false", # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True, —ç—Ç–æ—Ç —Ñ–ª–∞–≥ —Å–¥–µ–ª–∞–µ—Ç –µ–≥–æ False
        dest="include_content",
        help="–ù–µ –≤–∫–ª—é—á–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤, —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É."
    )
    parser.add_argument(
        "--add-ext",
        action="append",
        default=[],
        help="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, .log). –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑."
    )
    parser.add_argument(
        "--add-ignore-dir",
        action="append",
        default=[],
        help="–î–æ–±–∞–≤–∏—Ç—å –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, my_temp_dir). –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑."
    )
    parser.add_argument(
        "--add-ignore-file",
        action="append",
        default=[],
        help="–î–æ–±–∞–≤–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, temp.dat). –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑."
    )


    args = parser.parse_args()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if args.add_ext:
        for ext in args.add_ext:
            TEXT_FILE_EXTENSIONS.add(ext if ext.startswith('.') else '.' + ext)
    if args.add_ignore_dir:
        IGNORE_DIRS.update(args.add_ignore_dir)
    if args.add_ignore_file:
        IGNORE_FILES.update(args.add_ignore_file)

    get_project_structure(args.project_path, args.output, args.max_depth, args.include_content)